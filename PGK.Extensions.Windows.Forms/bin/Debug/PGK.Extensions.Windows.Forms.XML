<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PGK.Extensions.Windows.Forms</name>
    </assembly>
    <members>
        <member name="T:ComboBoxExtensions">
            <summary>
            Extension methods for System.Windows.Forms.ComboBox
            </summary>
        </member>
        <member name="M:ComboBoxExtensions.MeasureDropDownWidth(System.Windows.Forms.ComboBox,System.Int32,System.Int32)">
            <summary>
            Automatic calculation of the required width of the drop-down list
            </summary>
            <param name="comboBox">Current ComboBox</param>
            <param name="rightSpaceWidth">Additional white space on the right</param>
            <param name="minDropDownWidth">Minimum width of the drop-down list. If value is '-1', minimum width == comboBox.Width</param>
            <example>
            	<code>
                    //Demo #1
                    var names = new[] { "Aleksey", "Alexander", "Anton", "Vladislav" };
                    comboBox1.DataSource = names; // or comboBox1.Items.AddRange(names);
                    comboBox1.Width = 40;
                    comboBox1.MeasureDropDownWidth();
            
                    //Demo #2
                    comboBox1.SizeChanged += (s, e) => comboBox1.MeasureDropDownWidth();
                    comboBox1.Width = 150;
                    comboBox1.Anchor |= AnchorStyles.Right;
            	</code>
            </example>
            <remarks>
            	Contributed by nagits, http://about.me/AlekseyNagovitsyn
            </remarks>
        </member>
        <member name="T:ControlExtensions">
            <summary>
              Extension methods for System.Windows.Forms.Control.
            </summary>
        </member>
        <member name="M:ControlExtensions.IsInWinDesignMode(System.Windows.Forms.Control)">
            <summary>
              Returns <c>true</c> if target control is in design mode or one of the target's parent is in design mode.
              Othervise returns <c>false</c>.
            </summary>
            <param name = "target">Target control. Can not be null.</param>
            <example>
              bool designMode = this.button1.IsInWinDesignMode();
            </example>
            <remarks>
              The design mode is set only to direct controls in desgined control/form.
              However the child controls in controls/usercontrols does not flag for "my parent is in design mode".
              The solution is traversion upon parents of target control.
            
              Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
        </member>
        <member name="M:ControlExtensions.IsInWinRuntimeMode(System.Windows.Forms.Control)">
            <summary>
              Returns <c>true</c> if target control is NOT in design mode and none of the target's parent is NOT in design mode.
              Othervise returns <c>false</c>.
            </summary>
            <param name = "target">Target control. Can not be null.</param>
            <example>
              bool runtimeMode = this.button1.IsInWinRuntimenMode();
            </example>
            <remarks>
              The design mode is set only to direct controls in desgined control/form.
              However the child controls in controls/usercontrols does not flag for "my parent is in design mode".
              The solution is traversion upon parents of target control.
            
              Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
        </member>
        <member name="M:ControlExtensions.RunInUIThread(System.Windows.Forms.Control,System.Action)">
            <summary>
              Invoke action on UI thread of target control.
              If current thread is other than the UI thread of control, the Control.Invoke will be used.
              Othervise the action is invoked on current thread.
            </summary>
            <param name = "target">Target control. Can not be null.</param>
            <param name = "action">Action to invoke. Can not be null.</param>
            <example>
              this.button1.RunInUIThread( ()=> this.button1.Text = "Click me!" );
            </example>
            <remarks>
              Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
        </member>
        <member name="M:ControlExtensions.FindParentsOfType``1(System.Windows.Forms.Control)">
            <summary>
              Find parent controls of target control which are (inherits or implements) specified type.
            </summary>
            <typeparam name = "T">Type of searched controls.</typeparam>
            <param name = "target">Target control. Can not be null.</param>
            <returns>Return enumerable of parent controls.</returns>
            <example>
              var parentPanels = this.button1.FindParentsOfType&lt;Panel&gt;();
            
              var firstParentPanel = this.button1.FindParentsOfType&lt;Panel&gt;().FirstOrDefault();
            </example>
            <remarks>
              Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
        </member>
        <member name="M:ControlExtensions.FindChildsOfType``1(System.Windows.Forms.Control)">
            <summary>
              Find child controls of target control which are (inherits or implements) specified type.
            
              Overload for: FindChildsOfType&lt;T&gt;(target, false);
            </summary>
            <typeparam name = "T">Type of searched controls.</typeparam>
            <param name = "target">Target control. Can not be null.</param>
            <remarks>
              Depth-first search is used.
            
              Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
            <returns>Enumerable object with child controls of specified type.</returns>
        </member>
        <member name="M:ControlExtensions.FindChildsOfType``1(System.Windows.Forms.Control,System.Boolean)">
            <summary>
              Find child controls of target control which are (inherits or implements) specified type.
            </summary>
            <typeparam name = "T">Type of searched controls.</typeparam>
            <param name = "target">Target control. Can not be null.</param>
            <param name = "searchChildrenInReturnedControls">If true, the search algorithm will be continue in returned controls. Othervise the returned control will not be searched.</param>
            <remarks>
              Depth-first search is used.
            
              Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
            <returns>Enumerable object with child controls of specified type.</returns>
        </member>
        <member name="T:PropertyGridExtensions">
            <summary>
            Extension methods for the PropertyGrid data type
            </summary>
        </member>
        <member name="M:PropertyGridExtensions.MoveSplitterTo(System.Windows.Forms.PropertyGrid,System.Int32)">
            <summary>
            Moves splitter between two columns
            </summary>
            <param name="propertyGrid">Source PropertyGrid control</param>
            <param name="pos">Splitter position</param>
            <example>
            	<code>
                    propertyGrid1.MoveSplitterTo(Convert.ToInt32(propertyGrid1.Width * 0.8));
                    //Column1 width = 80%, Column2 width = 20%
            	</code>
            </example>
            <remarks>
            	Contributed by nagits, http://about.me/AlekseyNagovitsyn
            </remarks>
        </member>
        <member name="T:TabControlExtensions">
            <summary>
            Extension methods for System.Windows.Forms.TabControl
            </summary>
        </member>
        <member name="M:TabControlExtensions.HideHeaders(System.Windows.Forms.TabControl)">
            <summary>
            Hide tab page headers
            </summary>
            <param name="tabControl">Current TabControl</param>
        </member>
        <member name="M:TabControlExtensions.ShowHeaders(System.Windows.Forms.TabControl)">
            <summary>
            Show tab page headers
            </summary>
            <param name="tabControl">Current TabControl</param>
        </member>
        <member name="M:TabControlExtensions.IsHeadersVisible(System.Windows.Forms.TabControl)">
            <summary>
            Check, tab page headers are visible or hidden
            </summary>
            <param name="tabControl">Current TabControl</param>
            <returns>Returns true if visible</returns>
        </member>
        <member name="M:TabControlExtensions.SetHeadersVisible(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Set visibility of tab page headers
            </summary>
            <param name="tabControl">Current TabControl</param>
            <param name="visible">Visibility of tab page headers</param>
        </member>
        <member name="T:TabPageExtensions">
            <summary>
            Extension methods for System.Windows.Forms.TabPage
            </summary>
        </member>
        <member name="M:TabPageExtensions.SetVisible(System.Windows.Forms.TabPage,System.Boolean)">
            <summary>
            Set visibility of current TabPage in the parent TabControl.TabPages collection
            </summary>
            <param name="tabPage">Current TabPage</param>
            <param name="visible">Visibility of this tab page</param>
        </member>
        <member name="M:TabPageExtensions.IsVisible(System.Windows.Forms.TabPage)">
            <summary>
            Checks, tab page into the TabControl.TabPages collection or not
            </summary>
            <param name="tabPage">Current TabPage</param>
            <returns>Returns true if visible</returns>
        </member>
        <member name="M:TabPageExtensions.ShowTabPage(System.Windows.Forms.TabPage)">
            <summary>
            Show tab page.
            <para>Returns back previously temporarily deleted tab page to the parent TabControl.TabPages collection</para>
            </summary>
            <param name="tabPage">Current TabPage</param>
        </member>
        <member name="M:TabPageExtensions.HideTabPage(System.Windows.Forms.TabPage)">
            <summary>
            Hide tab page.
            <para>Temporarily removes the tab page from the parent TabControl.TabPages collection</para>
            </summary>
            <param name="tabPage">Current TabPage</param>
        </member>
    </members>
</doc>
