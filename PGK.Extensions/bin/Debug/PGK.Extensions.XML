<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PGK.Extensions</name>
    </assembly>
    <members>
        <member name="T:ArrayExtension">
            <summary>
            	Extension methods for the array data type
            </summary>
        </member>
        <member name="M:ArrayExtension.IsNullOrEmpty(System.Array)">
            <summary>
            	Check if the array is null or empty
            </summary>
            <param name = "source"></param>
            <returns></returns>
        </member>
        <member name="M:ArrayExtension.WithinIndex(System.Array,System.Int32)">
            <summary>
            	Check if the index is within the array
            </summary>
            <param name = "source"></param>
            <param name = "index"></param>
            <returns></returns>
             <remarks>
             	Contributed by Michael T, http://about.me/MichaelTran
             </remarks>
        </member>
        <member name="M:ArrayExtension.WithinIndex(System.Array,System.Int32,System.Int32)">
            <summary>
            	Check if the index is within the array
            </summary>
            <param name = "source"></param>
            <param name = "index"></param>
            <param name="dimension"></param>
            <returns></returns>
             <remarks>
             	Contributed by Michael T, http://about.me/MichaelTran
             </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ArrayExtension.CombineArray``1(``0[],``0[])" -->
        <member name="M:ArrayExtension.ClearAll(System.Array)">
            <summary>
            To clear the contents of the array.
            </summary>
            <param name="clear"> The array to clear</param>
            <returns>Cleared array</returns>
            <example>
                <code>
                    Array array = Array.CreateInstance(typeof(string), 2);
                    array.SetValue("One", 0); array.SetValue("Two", 1);
                    Array arrayToClear = array.ClearAll();
                </code>
            </example>
            <remarks>
            	Contributed by Mohammad Rahman, http://mohammad-rahman.blogspot.com/
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ArrayExtension.ClearAll``1(``0[])" -->
        <member name="M:ArrayExtension.ClearAt(System.Array,System.Int32)">
            <summary>
            To clear a specific item in the array.
            </summary>
            <param name="arrayToClear">The array in where to clean the item.</param>
            <param name="at">Which element to clear.</param>
            <returns></returns>
            <example>
                <code>
                    Array array = Array.CreateInstance(typeof(string), 2);
                    array.SetValue("One", 0); array.SetValue("Two", 1);
                    Array result = array.ClearAt(2);
                </code>
            </example>
            <remarks>
            	Contributed by Mohammad Rahman, http://mohammad-rahman.blogspot.com/
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ArrayExtension.ClearAt``1(``0[],System.Int32)" -->
        <member name="M:ArrayExtension.IsEmpty(System.Array)">
            <summary>
            Tests if the array is empty.
            </summary>
            <param name="array">The array to test.</param>
            <returns>True if the array is empty.</returns>
        </member>
        <member name="M:ArrayExtension.BlockCopy``1(``0[],System.Int32,System.Int32)">
            <summary>
            Returns a block of items from an array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="index"></param>
            <param name="length"></param>
            <returns></returns>
            <remarks>Contributed by Chris Gessler</remarks>
        </member>
        <member name="M:ArrayExtension.BlockCopy``1(``0[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns a block of items from an array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="padToLength"></param>
            <returns></returns>
            <remarks>
            Test results prove that Array.Copy is many times faster than Skip/Take and LINQ
            Item count: 1,000,000
            Array.Copy:     15 ms 
            Skip/Take:  42,464 ms - 42.5 seconds
            LINQ:          881 ms
            
            Contributed by Chris Gessler</remarks>
        </member>
        <member name="M:ArrayExtension.BlockCopy``1(``0[],System.Int32,System.Boolean)">
            <summary>
            Allows enumeration over an Array in blocks
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="count"></param>
            <param name="padToLength"></param>
            <returns></returns>
            <remarks>Contributed by Chris Gessler</remarks>
        </member>
        <member name="T:BitmapExtensions">
            <summary>
            	Extension methods for the System.Drawing.Bitmap class
            </summary>
        </member>
        <member name="M:BitmapExtensions.ScaleToSize(System.Drawing.Bitmap,System.Drawing.Size)">
            <summary>
            	Scales the bitmap to the passed target size without respecting the aspect.
            </summary>
            <param name = "bitmap">The source bitmap.</param>
            <param name = "size">The target size.</param>
            <returns>The scaled bitmap</returns>
            <example>
            	<code>
            		var bitmap = new Bitmap("image.png");
            		var thumbnail = bitmap.ScaleToSize(100, 100);
            	</code>
            </example>
        </member>
        <member name="M:BitmapExtensions.ScaleToSize(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            	Scales the bitmap to the passed target size without respecting the aspect.
            </summary>
            <param name = "bitmap">The source bitmap.</param>
            <param name = "width">The target width.</param>
            <param name = "height">The target height.</param>
            <returns>The scaled bitmap</returns>
            <example>
            	<code>
            		var bitmap = new Bitmap("image.png");
            		var thumbnail = bitmap.ScaleToSize(100, 100);
            	</code>
            </example>
        </member>
        <member name="M:BitmapExtensions.ScaleProportional(System.Drawing.Bitmap,System.Drawing.Size)">
            <summary>
            	Scales the bitmap to the passed target size by respecting the aspect.
            </summary>
            <param name = "bitmap">The source bitmap.</param>
            <param name = "size">The target size.</param>
            <returns>The scaled bitmap</returns>
            <example>
            	<code>
            		var bitmap = new Bitmap("image.png");
            		var thumbnail = bitmap.ScaleProportional(100, 100);
            	</code>
            </example>
            <remarks>
            	Please keep in mind that the returned bitmaps size might not match the desired size due to original bitmaps aspect.
            </remarks>
        </member>
        <member name="M:BitmapExtensions.ScaleProportional(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            	Scales the bitmap to the passed target size by respecting the aspect.
            </summary>
            <param name = "bitmap">The source bitmap.</param>
            <param name = "width">The target width.</param>
            <param name = "height">The target height.</param>
            <returns>The scaled bitmap</returns>
            <example>
            	<code>
            		var bitmap = new Bitmap("image.png");
            		var thumbnail = bitmap.ScaleProportional(100, 100);
            	</code>
            </example>
            <remarks>
            	Please keep in mind that the returned bitmaps size might not match the desired size due to original bitmaps aspect.
            </remarks>
        </member>
        <member name="M:BitmapExtensions.ScaleToSizeProportional(System.Drawing.Bitmap,System.Drawing.Size)">
            <summary>
            	Scales the bitmap to the passed target size by respecting the aspect. The overlapping background is filled with the given background color.
            </summary>
            <param name = "bitmap">The source bitmap.</param>
            <param name = "size">The target size.</param>
            <returns>The scaled bitmap</returns>
            <example>
            	<code>
            		var bitmap = new Bitmap("image.png");
            		var thumbnail = bitmap.ScaleToSizeProportional(100, 100);
            	</code>
            </example>
        </member>
        <member name="M:BitmapExtensions.ScaleToSizeProportional(System.Drawing.Bitmap,System.Drawing.Color,System.Drawing.Size)">
            <summary>
            	Scales the bitmap to the passed target size by respecting the aspect. The overlapping background is filled with the given background color.
            </summary>
            <param name = "bitmap">The source bitmap.</param>
            <param name = "backgroundColor">The color of the background.</param>
            <param name = "size">The target size.</param>
            <returns>The scaled bitmap</returns>
            <example>
            	<code>
            		var bitmap = new Bitmap("image.png");
            		var thumbnail = bitmap.ScaleToSizeProportional(100, 100);
            	</code>
            </example>
        </member>
        <member name="M:BitmapExtensions.ScaleToSizeProportional(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            	Scales the bitmap to the passed target size by respecting the aspect. The overlapping background is filled with the given background color.
            </summary>
            <param name = "bitmap">The source bitmap.</param>
            <param name = "width">The target width.</param>
            <param name = "height">The target height.</param>
            <returns>The scaled bitmap</returns>
            <example>
            	<code>
            		var bitmap = new Bitmap("image.png");
            		var thumbnail = bitmap.ScaleToSizeProportional(100, 100);
            	</code>
            </example>
        </member>
        <member name="M:BitmapExtensions.ScaleToSizeProportional(System.Drawing.Bitmap,System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            	Scales the bitmap to the passed target size by respecting the aspect. The overlapping background is filled with the given background color.
            </summary>
            <param name = "bitmap">The source bitmap.</param>
            <param name = "backgroundColor">The color of the background.</param>
            <param name = "width">The target width.</param>
            <param name = "height">The target height.</param>
            <returns>The scaled bitmap</returns>
            <example>
            	<code>
            		var bitmap = new Bitmap("image.png");
            		var thumbnail = bitmap.ScaleToSizeProportional(100, 100);
            	</code>
            </example>
        </member>
        <member name="T:ByteArrayExtensions">
            <summary>
            	Extension methods for byte-Arrays
            </summary>
        </member>
        <member name="M:ByteArrayExtensions.FindArrayInArray(System.Byte[],System.Byte[])">
            <summary>
            	Find the first occurence of an byte[] in another byte[]
            </summary>
            <param name = "buf1">the byte[] to search in</param>
            <param name = "buf2">the byte[] to find</param>
            <returns>the first position of the found byte[] or -1 if not found</returns>
            <remarks>
            	Contributed by blaumeister, http://www.codeplex.com/site/users/view/blaumeiser
            </remarks>
        </member>
        <member name="T:CollectionExtensions">
            <summary>
            	Extension methods for all kind of Collections implementing the ICollection&lt;T&gt; interface
            </summary>
        </member>
        <member name="M:CollectionExtensions.AddUnique``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            	Adds a value uniquely to to a collection and returns a value whether the value was added or not.
            </summary>
            <typeparam name = "T">The generic collection value type</typeparam>
            <param name = "collection">The collection.</param>
            <param name = "value">The value to be added.</param>
            <returns>Indicates whether the value was added or not</returns>
            <example>
            	<code>
            		list.AddUnique(1); // returns true;
            		list.AddUnique(1); // returns false the second time;
            	</code>
            </example>
        </member>
        <member name="M:CollectionExtensions.AddRangeUnique``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            	Adds a range of value uniquely to a collection and returns the amount of values added.
            </summary>
            <typeparam name = "T">The generic collection value type.</typeparam>
            <param name = "collection">The collection.</param>
            <param name = "values">The values to be added.</param>
            <returns>The amount if values that were added.</returns>
        </member>
        <member name="M:CollectionExtensions.RemoveWhere``1(System.Collections.Generic.ICollection{``0},System.Predicate{``0})">
            <summary>
            	Remove an item from the collection with predicate
            </summary>
            <param name = "collection"></param>
            <param name = "predicate"></param>
            <typeparam name = "T"></typeparam>
            <exception cref = "T:System.ArgumentNullException"></exception>
             <remarks>
             	Contributed by Michael T, http://about.me/MichaelTran
             	Renamed by James Curran, to match corresponding HashSet.RemoveWhere()
             </remarks>
        </member>
        <member name="M:CollectionExtensions.IsEmpty(System.Collections.ICollection)">
            <summary>
            Tests if the collection is empty.
            </summary>
            <param name="collection">The collection to test.</param>
            <returns>True if the collection is empty.</returns>
        </member>
        <member name="M:CollectionExtensions.IsEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Tests if the collection is empty.
            </summary>
            <typeparam name="T">The type of the items in 
            the collection.</typeparam>
            <param name="collection">The collection to test.</param>
            <returns>True if the collection is empty.</returns>
        </member>
        <member name="M:CollectionExtensions.IsEmpty(System.Collections.IList)">
            <summary>
            Tests if the collection is empty.
            </summary>
            <param name="collection">The collection to test.</param>
            <returns>True if the collection is empty.</returns>
        </member>
        <member name="M:CollectionExtensions.IsEmpty``1(System.Collections.Generic.IList{``0})">
            <summary>
            Tests if the collection is empty.
            </summary>
            <typeparam name="T">The type of the items in 
            the collection.</typeparam>
            <param name="collection">The collection to test.</param>
            <returns>True if the collection is empty.</returns>
        </member>
        <member name="M:ColorExtensions.ToHtmlColor(System.Drawing.Color)">
            <summary>
            returns the RGB Value of a color.
            </summary>
            <param name="color">The color.</param>
            <returns>string</returns>
            <remarks></remarks>
        </member>
        <member name="M:ColorExtensions.ToOleColor(System.Drawing.Color)">
            <summary>
            returns the OLE Value of the color.
            </summary>
            <param name="color">The color.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ColorExtensions.ToWin32Color(System.Drawing.Color)">
            <summary>
            returns the Win32 value of the color.
            </summary>
            <param name="color">The color.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:PGK.Extensions.CombinedException">
            <summary>
            	Generic exception for combining several other exceptions
            </summary>
        </member>
        <member name="M:PGK.Extensions.CombinedException.#ctor(System.String,System.Exception[])">
            <summary>
            	Initializes a new instance of the <see cref = "T:PGK.Extensions.CombinedException" /> class.
            </summary>
            <param name = "message">The message.</param>
            <param name = "innerExceptions">The inner exceptions.</param>
        </member>
        <member name="P:PGK.Extensions.CombinedException.InnerExceptions">
            <summary>
            	Gets the inner exceptions.
            </summary>
            <value>The inner exceptions.</value>
        </member>
        <member name="M:PGK.Extensions.CombinedException.Combine(System.String,System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Combines the specified exception.
            </summary>
            <param name="message">The message.</param>
            <param name="innerExceptions">The inner exceptions.</param>
            <returns></returns>
        </member>
        <member name="T:PGK.Extensions.Converter`1">
            <summary>
            	An internal implementation of the IConverter&lt;T&gt; interface
            </summary>
            <typeparam name = "T"></typeparam>
        </member>
        <member name="M:PGK.Extensions.Converter`1.#ctor(`0)">
            <summary>
            	Initializes a new instance of the <see cref = "T:PGK.Extensions.Converter`1" /> class.
            </summary>
            <param name = "value">The value.</param>
        </member>
        <member name="P:PGK.Extensions.Converter`1.Value">
            <summary>
            	Gets the internal value to be converted.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:PGK.Extensions.Cultures">
            <summary>
            Enumeration of all CultureInfo Names using the DisplayStringAttribute to allow 
            developer to easily specify a culture from an enumeration.
            </summary>
        </member>
        <member name="T:PGK.Extensions.StringBuilderExtensions">
            <summary>
            Extensions for StringBuilder
            </summary>
        </member>
        <member name="M:PGK.Extensions.StringBuilderExtensions.AppendLine(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
            AppendLine version with format string parameters.
            </summary>
        </member>
        <member name="M:PGK.Extensions.StringBuilderExtensions.AppendLineIf(System.Text.StringBuilder,System.Boolean,System.Object)">
            <summary>
            Appends the value of the object's System.Object.ToString() method followed by the default line terminator to the end of the current
            System.Text.StringBuilder object if a condition is true
            </summary>
            <param name="this"></param>
            <param name="condition">The conditional expression to evaluate.</param>
            <param name="value"></param>
        </member>
        <member name="M:PGK.Extensions.StringBuilderExtensions.AppendLineIf(System.Text.StringBuilder,System.Boolean,System.String,System.Object[])">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more format items, followed by the default
            line terminator to the end of the current System.Text.StringBuilder object if a condition is true
            </summary>
            <param name="this"></param>
            <param name="condition">The conditional expression to evaluate.</param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:PGK.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.Object)">
            <summary>
            Appends the value of the object's System.Object.ToString() method to the end of the current
            System.Text.StringBuilder object if a condition is true
            </summary>
            <param name="this"></param>
            <param name="condition"></param>
            <param name="value"></param>
        </member>
        <member name="M:PGK.Extensions.StringBuilderExtensions.AppendFormatIf(System.Text.StringBuilder,System.Boolean,System.String,System.Object[])">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more format items, 
            to the end of the current System.Text.StringBuilder object if a condition is true
            </summary>
            <param name="this"></param>
            <param name="condition"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="T:PGK.Extensions.DbConnectionExtensions">
            <summary>
            Extensions for IDbConnection
            </summary>
        </member>
        <member name="M:PGK.Extensions.DbConnectionExtensions.StateIsWithin(System.Data.IDbConnection,System.Data.ConnectionState[])">
            <summary>
            Returns true if the database connection is in one of the states received.
            </summary>
        </member>
        <member name="M:PGK.Extensions.DbConnectionExtensions.IsInState(System.Data.IDbConnection,System.Data.ConnectionState)">
            <summary>
            Returns true if the database connection is in the specified state.
            </summary>
        </member>
        <member name="M:PGK.Extensions.DbConnectionExtensions.OpenIfNot(System.Data.IDbConnection)">
            <summary>
            Open the Database connection if not already opened.
            </summary>
        </member>
        <member name="T:PGK.Extensions.DrawingExtensions">
            <summary>
            Extension methods for the System.Drawing class
            </summary>
        </member>
        <member name="M:PGK.Extensions.DrawingExtensions.SplitIcon(System.Drawing.Icon)">
            <summary>
            Split an Icon (that contains multiple icons) into an array of Icon each rapresenting a single icons.
            </summary>
            <param name="icon">Instance value.</param>
            <returns>An array of <see cref="T:System.Drawing.Icon"/> objects.</returns>
        </member>
        <member name="M:PGK.Extensions.DrawingExtensions.ToBytes(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Serializes the image in an byte array
            </summary>
            <param name="image">Instance value.</param>
            <param name="format">Specifies the format of the image.</param>
            <returns>The image serialized as byte array.</returns>
        </member>
        <member name="M:PGK.Extensions.DrawingExtensions.GetBounds(System.Drawing.Image)">
            <summary>
            Gets the bounds of the image in pixels
            </summary>
            <param name="image">Instance value.</param>
            <returns>A rectangle that has the same hight and width as given image.</returns>
        </member>
        <member name="M:PGK.Extensions.DrawingExtensions.Surround(System.Drawing.Point,System.Int32)">
            <summary>
            Gets the rectangle that sorrounds the given point by a specified distance.
            </summary>
            <param name="p">Instance value.</param>
            <param name="distance">Distance that will be used to surround the point.</param>
            <returns>Rectangle that sorrounds the given point by a specified distance.</returns>
        </member>
        <member name="M:PGK.Extensions.DrawingExtensions.ScaleToSize(System.Drawing.Bitmap,System.Drawing.Size)">
            <summary>
            	Scales the bitmap to the passed target size without respecting the aspect.
            </summary>
            <param name = "bitmap">The source bitmap.</param>
            <param name = "size">The target size.</param>
            <returns>The scaled bitmap</returns>
            <example>
            	<code>
            		var bitmap = new Bitmap("image.png");
            		var thumbnail = bitmap.ScaleToSize(100, 100);
            	</code>
            </example>
        </member>
        <member name="M:PGK.Extensions.DrawingExtensions.ScaleToSize(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            	Scales the bitmap to the passed target size without respecting the aspect.
            </summary>
            <param name = "bitmap">The source bitmap.</param>
            <param name = "width">The target width.</param>
            <param name = "height">The target height.</param>
            <returns>The scaled bitmap</returns>
            <example>
            	<code>
            		var bitmap = new Bitmap("image.png");
            		var thumbnail = bitmap.ScaleToSize(100, 100);
            	</code>
            </example>
        </member>
        <member name="M:PGK.Extensions.DrawingExtensions.ScaleProportional(System.Drawing.Bitmap,System.Drawing.Size)">
            <summary>
            	Scales the bitmap to the passed target size by respecting the aspect.
            </summary>
            <param name = "bitmap">The source bitmap.</param>
            <param name = "size">The target size.</param>
            <returns>The scaled bitmap</returns>
            <example>
            	<code>
            		var bitmap = new Bitmap("image.png");
            		var thumbnail = bitmap.ScaleProportional(100, 100);
            	</code>
            </example>
            <remarks>
            	Please keep in mind that the returned bitmaps size might not match the desired size due to original bitmaps aspect.
            </remarks>
        </member>
        <member name="M:PGK.Extensions.DrawingExtensions.ScaleProportional(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            	Scales the bitmap to the passed target size by respecting the aspect.
            </summary>
            <param name = "bitmap">The source bitmap.</param>
            <param name = "width">The target width.</param>
            <param name = "height">The target height.</param>
            <returns>The scaled bitmap</returns>
            <example>
            	<code>
            		var bitmap = new Bitmap("image.png");
            		var thumbnail = bitmap.ScaleProportional(100, 100);
            	</code>
            </example>
            <remarks>
            	Please keep in mind that the returned bitmaps size might not match the desired size due to original bitmaps aspect.
            </remarks>
        </member>
        <member name="M:PGK.Extensions.DrawingExtensions.ScaleToSizeProportional(System.Drawing.Bitmap,System.Drawing.Size)">
            <summary>
            	Scales the bitmap to the passed target size by respecting the aspect. The overlapping background is filled with the given background color.
            </summary>
            <param name = "bitmap">The source bitmap.</param>
            <param name = "size">The target size.</param>
            <returns>The scaled bitmap</returns>
            <example>
            	<code>
            		var bitmap = new Bitmap("image.png");
            		var thumbnail = bitmap.ScaleToSizeProportional(100, 100);
            	</code>
            </example>
        </member>
        <member name="M:PGK.Extensions.DrawingExtensions.ScaleToSizeProportional(System.Drawing.Bitmap,System.Drawing.Color,System.Drawing.Size)">
            <summary>
            	Scales the bitmap to the passed target size by respecting the aspect. The overlapping background is filled with the given background color.
            </summary>
            <param name = "bitmap">The source bitmap.</param>
            <param name = "backgroundColor">The color of the background.</param>
            <param name = "size">The target size.</param>
            <returns>The scaled bitmap</returns>
            <example>
            	<code>
            		var bitmap = new Bitmap("image.png");
            		var thumbnail = bitmap.ScaleToSizeProportional(100, 100);
            	</code>
            </example>
        </member>
        <member name="M:PGK.Extensions.DrawingExtensions.ScaleToSizeProportional(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            	Scales the bitmap to the passed target size by respecting the aspect. The overlapping background is filled with the given background color.
            </summary>
            <param name = "bitmap">The source bitmap.</param>
            <param name = "width">The target width.</param>
            <param name = "height">The target height.</param>
            <returns>The scaled bitmap</returns>
            <example>
            	<code>
            		var bitmap = new Bitmap("image.png");
            		var thumbnail = bitmap.ScaleToSizeProportional(100, 100);
            	</code>
            </example>
        </member>
        <member name="M:PGK.Extensions.DrawingExtensions.ScaleToSizeProportional(System.Drawing.Bitmap,System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            	Scales the bitmap to the passed target size by respecting the aspect. The overlapping background is filled with the given background color.
            </summary>
            <param name = "bitmap">The source bitmap.</param>
            <param name = "backgroundColor">The color of the background.</param>
            <param name = "width">The target width.</param>
            <param name = "height">The target height.</param>
            <returns>The scaled bitmap</returns>
            <example>
            	<code>
            		var bitmap = new Bitmap("image.png");
            		var thumbnail = bitmap.ScaleToSizeProportional(100, 100);
            	</code>
            </example>
        </member>
        <member name="M:PGK.Extensions.DrawingExtensions.GetImageInBytes(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Gets the Image as a Byte[]
            </summary>
            <param name="img">The img.</param>
            <param name="format">ImageFormat</param>
            <returns>A Byte[] of the Image</returns>
            <remarks></remarks>
        </member>
        <member name="M:PGK.Extensions.DrawingExtensions.GetImageInBase64(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Gets the Image in Base64 format for storage or transfer
            </summary>
            <param name="img">The img.</param>
            <param name="format">ImageFormat</param>
            <returns>Base64 String of the Image</returns>
            <remarks></remarks>
        </member>
        <member name="M:PGK.Extensions.DrawingExtensions.ScaleImage(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Scales the image.
            </summary>
            <param name="img">The img.</param>
            <param name="height">The height as int.</param>
            <param name="width">The width as int.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PGK.Extensions.DrawingExtensions.ResizeAndFit(System.Drawing.Image,System.Drawing.Size)">
            <summary>
            Resizes the image to fit new size.
            </summary>
            <param name="image">The image.</param>
            <param name="newSize">The new size.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PGK.Extensions.DrawingExtensions.ConvertToImage(System.Byte[])">
            <summary>
            Converts to image.
            </summary>
            <param name="byteArrayIn">The byte array in.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="F:PGK.Extensions.SystemDependencies.Clock.SubstituteForNow">
            <summary>
            Set a substitute (and fix) value for Now.  See <see cref="T:PGK.Extensions.SystemDependencies.SubstituteForSystemDate"/>
            for usage example.
            </summary>
        </member>
        <member name="T:PGK.Extensions.SystemDependencies.SubstituteForSystemDate">
            <summary>
            Class to use for replacing System date used by extensions methods.
            <para>This class is for testing purpose</para>
            <example>
            <code>
            using (var presentTime = new SubstituteForSystemDate(new DateTime(2010, 1, 1)))
            {
                // Code that use Clock.Now static property
            }
            </code>
            </example>
            </summary>
        </member>
        <member name="T:PGK.Extensions.TimeSpanExtensions">
            <summary>
            TimeSpan extensions
            </summary>
        </member>
        <member name="M:PGK.Extensions.TimeSpanExtensions.MultiplyBy(System.TimeSpan,System.Int32)">
            <summary>
                Multiply a <c>System.TimeSpan</c> by a <paramref name="factor"/>
            </summary>
            <param name="source">The given <c>System.TimeSpan</c> to be multiplied</param>
            <param name="factor">The multiplier factor</param>
            <returns>The multiplication of the <paramref name="source"/> by <paramref name="factor"/></returns>
        </member>
        <member name="M:PGK.Extensions.TimeSpanExtensions.MultiplyBy(System.TimeSpan,System.Double)">
            <summary>
                Multiply a <c>System.TimeSpan</c> by a <paramref name="factor"/>
            </summary>
            <param name="source">The given <c>System.TimeSpan</c> to be multiplied</param>
            <param name="factor">The multiplier factor</param>
            <returns>The multiplication of the <paramref name="source"/> by <paramref name="factor"/></returns>
        </member>
        <member name="T:PGK.Extensions.XmlSerializeExtensions">
            <summary>
                Extension methods for the XmlSerialize
            </summary>
        </member>
        <member name="M:PGK.Extensions.XmlSerializeExtensions.CanXmlSerialize``1(``0)">
            <summary>
                Check that can Xml Serialize this instance or not.
            </summary>
            <typeparam name="T">Type of object to Xml Serialize.</typeparam>
            <param name="instance">An instance of object to Xml serialize.</param>
            <returns>If Xml serialize was possible, returns true, otherwise returns false.</returns>
        </member>
        <member name="M:PGK.Extensions.XmlSerializeExtensions.CanXmlDeserialize``1(System.String)">
            <summary>
                Check that can Xml Deserialize this file or not.
            </summary>
            <typeparam name="T">Type of object which serialized in file.</typeparam>
            <param name="filename">Name of file.</param>
            <returns>IF file can be deserialize returns true, otherwise return false.</returns>
        </member>
        <member name="M:PGK.Extensions.XmlSerializeExtensions.CanXmlDeserialize``1(System.IO.Stream)">
            <summary>
                Check that can Xml Deserialize this file or not.
            </summary>
            <typeparam name="T">Type of object which serialized in Stream.</typeparam>
            <param name="stream">Stream to deserialize.</param>
            <returns>IF Stream can be deserialize returns true, otherwise return false.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:PGK.Extensions.XmlSerializeExtensions.XmlSerialize``1(``0,System.IO.Stream)">
            <summary>
                Xml Serialize an instance of specific type to stream.
            </summary>
            <typeparam name="T">Type of instance to Xml serialize.</typeparam>
            <param name="instance">Instance to Xml serialize.</param>
            <param name="stream">Stream to save Xml serialize in.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:PGK.Extensions.XmlSerializeExtensions.XmlSerialize``1(``0,System.String)">
            <summary>
                Xml Serialize an instance of specific type to file.
            </summary>
            <typeparam name="T">Type of instance to Xml serialize.</typeparam>
            <param name="instance">Instance to Xml serialize.</param>
            <param name="filename">File name to create and store Xml serialized data.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:PGK.Extensions.XmlSerializeExtensions.XmlDeserialize``1(System.IO.Stream)">
            <summary>
                Xml Deserialize this stream as object of <typeparamref name="T"/> from stream.
            </summary>
            <typeparam name="T">Type of instance to Xml Deserialize.</typeparam>
            <param name="stream">Stream to get Xml serialized data.</param>
            <returns>Returns an Xml Deserialized object.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:ComparableExtensions">
            <summary>
            	Extension methods for all comparable objects eg. string, DateTime, numeric values ...
            </summary>
        </member>
        <member name="M:ComparableExtensions.IsBetween``1(``0,``0,``0)">
            <summary>
            	Determines whether the specified value is between the the defined minimum and maximum range (including those values).
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "value">The value.</param>
            <param name = "minValue">The minimum value.</param>
            <param name = "maxValue">The maximum value.</param>
            <returns>
            	<c>true</c> if the specified value is between min and max; otherwise, <c>false</c>.
            </returns>
            <example>
            	var value = 5;
            	if(value.IsBetween(1, 10)) { 
            	// ... 
            	}
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ComparableExtensions.IsBetween``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})" -->
        <member name="T:ComponentExtensions">
            <summary>
            	Extension methods for IComponent data type.
            </summary>
        </member>
        <member name="M:ComponentExtensions.IsInDesignMode(System.ComponentModel.IComponent)">
            <summary>
            	Returns <c>true</c> if target component is in design mode.
            	Othervise returns <c>false</c>.
            </summary>
            <param name = "target">Target component. Can not be null.</param>
            <remarks>
            	Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
        </member>
        <member name="M:ComponentExtensions.IsInRuntimeMode(System.ComponentModel.IComponent)">
            <summary>
            	Returns <c>true</c> if target component is NOT in design mode.
            	Othervise returns <c>false</c>.
            </summary>
            <param name = "target">Target component.</param>
            <remarks>
            	Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
        </member>
        <member name="M:ConstructorExtensions.AutoInitialize``1(``0,System.Object)">
            <summary>
            Auto initialize an object source with an object data for all public accessible properties.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source object to have its' properties initialized.</param>
            <param name="data">The data object used to initialize the source object.</param>
            <remarks>
            Contributed by Tri Tran, http://about.me/triqtran
            </remarks>
        </member>
        <member name="M:ConstructorExtensions.AutoInitialize``1(``0,System.Object,System.Reflection.BindingFlags)">
            <summary>
            Auto Initialize an object source with a object data for all properties specified by the binding flags.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source object to have its' properties initialized.</param>
            <param name="data">The data object used to initialize the source object.</param>
            <param name="flags">The binding flags used for property accessability. See <see cref="T:System.Reflection.BindingFlags"/></param>
            <remarks>
            Contributed by Tri Tran, http://about.me/triqtran
            </remarks>
        </member>
        <member name="M:ConstructorExtensions.AutoInitialize``1(``0,System.Data.DataRow)">
            <summary>
            Auto initialize all public properties of the source object with data from a data row.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The object to be auto initialized.</param>
            <param name="data">The data row containing the data for initializing.</param>
            <remarks>
            Contributed by Tri Tran, http://about.me/triqtran
            </remarks>
        </member>
        <member name="M:ConstructorExtensions.AutoInitialize``1(``0,System.Data.DataRow,System.Reflection.BindingFlags)">
            <summary>
            Auto initialize all properties specified by the binding flags of the source object with data from a data row.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The object to be auto initialized.</param>
            <param name="row">The data row containing the data for initializing.</param>
            <param name="flags">The binding flags used for property accessability. See <see cref="T:System.Reflection.BindingFlags"/></param>
            <remarks>
            Contributed by Tri Tran, http://about.me/triqtran
            </remarks>
        </member>
        <member name="M:ConstructorExtensions.AutoInitialize``1(``0,System.Data.DataRow,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Auto initialize all public properties of the source object with data from a data row.
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="source">
            The object to be auto initialized.
            </param>
            <param name="data">
            The data row containing the data for initializing.
            </param>
            <param name="columns">
            The columns.
            </param>
            <remarks>
            Contributed by Tri Tran, http://about.me/triqtran
            </remarks>
        </member>
        <member name="M:ConstructorExtensions.AutoInitialize``1(``0,System.Data.DataRow,System.Reflection.BindingFlags,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Auto initialize all properties specified by the binding flags of the source object with data from a data row.
            </summary>
            <typeparam name="T">The type of the source.</typeparam>
            <param name="source">The object to be auto initialized.</param>
            <param name="row">The data row containing the data for initializing.</param>
            <param name="flags">The binding flags used for property accessability. See <see cref="T:System.Reflection.BindingFlags"/></param>
            <param name="columns">An expression to specify the columns.</param>
            <remarks>
            Contributed by Tri Tran, http://about.me/triqtran
            </remarks>
        </member>
        <member name="M:ConstructorExtensions.GetProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Get the property info from the property expression.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyExpression"></param>
            <returns></returns>
            <remarks>
            Contributed by Tri Tran, http://about.me/triqtran
            </remarks>
        </member>
        <member name="T:DecimalExtenders">
            <summary>
            Contains extension methods for the <see cref="T:System.Decimal"/> class
            </summary>
        </member>
        <member name="M:DecimalExtenders.RoundDecimalPoints(System.Decimal,System.Int32)">
            <summary>
            Rounds the supplied decimal to the specified amount of decimal points
            </summary>
            <param name="val">The decimal to round</param>
            <param name="decimalPoints">The number of decimal points to round the output value to</param>
            <returns>A rounded decimal</returns>
        </member>
        <member name="M:DecimalExtenders.RoundToTwoDecimalPoints(System.Decimal)">
            <summary>
            Rounds the supplied decimal value to two decimal points
            </summary>
            <param name="val">The decimal to round</param>
            <returns>A decimal value rounded to two decimal points</returns>
        </member>
        <member name="M:DecimalExtenders.Abs(System.Decimal)">
            <summary>
            Returns the absolute value of a <see cref="T:System.Decimal"/> number
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:DecimalExtenders.Abs(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="T:DoubleExtensions">
            <summary>
            	Extension methods for the Double data type
            </summary>
        </member>
        <member name="M:DoubleExtensions.InRange(System.Double,System.Double,System.Double)">
            <summary>Checks whether the value is in range</summary>
            <param name="value">The Value</param>
            <param name="minValue">The minimum value</param>
            <param name="maxValue">The maximum value</param>
        </member>
        <member name="M:DoubleExtensions.InRange(System.Double,System.Double,System.Double,System.Double)">
            <summary>Checks whether the value is in range or returns the default value</summary>
            <param name="value">The Value</param>
            <param name="minValue">The minimum value</param>
            <param name="maxValue">The maximum value</param>
            <param name="defaultValue">The default value</param>
        </member>
        <member name="M:DoubleExtensions.Days(System.Double)">
            <summary>
            Gets a TimeSpan from a double number of days.
            </summary>
            <param name="days">The number of days the TimeSpan will contain.</param>
            <returns>A TimeSpan containing the specified number of days.</returns>
            <remarks>
            	Contributed by jceddy
            </remarks>
        </member>
        <member name="M:DoubleExtensions.Hours(System.Double)">
            <summary>
            Gets a TimeSpan from a double number of hours.
            </summary>
            <param name="days">The number of hours the TimeSpan will contain.</param>
            <returns>A TimeSpan containing the specified number of hours.</returns>
            <remarks>
            	Contributed by jceddy
            </remarks>
        </member>
        <member name="M:DoubleExtensions.Milliseconds(System.Double)">
            <summary>
            Gets a TimeSpan from a double number of milliseconds.
            </summary>
            <param name="days">The number of milliseconds the TimeSpan will contain.</param>
            <returns>A TimeSpan containing the specified number of milliseconds.</returns>
            <remarks>
            	Contributed by jceddy
            </remarks>
        </member>
        <member name="M:DoubleExtensions.Minutes(System.Double)">
            <summary>
            Gets a TimeSpan from a double number of minutes.
            </summary>
            <param name="days">The number of minutes the TimeSpan will contain.</param>
            <returns>A TimeSpan containing the specified number of minutes.</returns>
            <remarks>
            	Contributed by jceddy
            </remarks>
        </member>
        <member name="M:DoubleExtensions.Seconds(System.Double)">
            <summary>
            Gets a TimeSpan from a double number of seconds.
            </summary>
            <param name="days">The number of seconds the TimeSpan will contain.</param>
            <returns>A TimeSpan containing the specified number of seconds.</returns>
            <remarks>
            	Contributed by jceddy
            </remarks>
        </member>
        <member name="T:DisplayStringAttribute">
            <summary>
            Specifies description for a member of the enum type for display to the UI
            </summary>
            <see cref="M:EnumExtensions.DisplayString(System.Enum)"/>
            <example>
                <code>
                    enum OperatingSystem
                    {
                       [DisplayString("MS-DOS")]
                       Msdos,
                    
                       [DisplayString("Windows 98")]
                       Win98,
                    
                       [DisplayString("Windows XP")]
                       Xp,
                    
                       [DisplayString("Windows Vista")]
                       Vista,
                    
                       [DisplayString("Windows 7")]
                       Seven,
                    }
                    
                    public string GetMyOSName()
                    {
                        var myOS = OperatingSystem.Seven;
                        return myOS.DisplayString();
                    }
                </code>
            </example>
            <remarks>
            	Contributed by nagits, http://about.me/AlekseyNagovitsyn
            </remarks>
        </member>
        <member name="F:DisplayStringAttribute.Default">
            <summary>
            The default value for the attribute <c>DisplayStringAttribute</c>, which is an empty string
            </summary>
        </member>
        <member name="P:DisplayStringAttribute.DisplayString">
            <summary>
            The value of this attribute
            </summary>
        </member>
        <member name="M:DisplayStringAttribute.#ctor">
            <summary>
            Initializes a new instance of the class <c>DisplayStringAttribute</c> with default value (empty string)
            </summary>
        </member>
        <member name="M:DisplayStringAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class <c>DisplayStringAttribute</c> with specified value
            </summary>
            <param name="displayString">The value of this attribute</param>
        </member>
        <member name="T:EnumExtensions">
            <summary>
            Extension methods for the enum data type
            </summary>
        </member>
        <member name="M:EnumExtensions.ClearFlag``1(System.Enum,``0)">
            <summary>
            Removes a flag and returns the new value
            </summary>
            <typeparam name="T">Enum type</typeparam>
            <param name="variable">Source enum</param>
            <param name="flag">Dumped flag</param>
            <returns>Result enum value</returns>
            <remarks>
            	Contributed by nagits, http://about.me/AlekseyNagovitsyn
            </remarks>
        </member>
        <member name="M:EnumExtensions.ClearFlags``1(System.Enum,``0[])">
            <summary>
            Removes flags and returns the new value
            </summary>
            <typeparam name="T">Enum type</typeparam>
            <param name="variable">Source enum</param>
            <param name="flags">Dumped flags</param>
            <returns>Result enum value</returns>
            <remarks>
            	Contributed by nagits, http://about.me/AlekseyNagovitsyn
            </remarks>
        </member>
        <member name="M:EnumExtensions.SetFlag``1(System.Enum,``0)">
            <summary>
            Includes a flag and returns the new value
            </summary>
            <typeparam name="T">Enum type</typeparam>
            <param name="variable">Source enum</param>
            <param name="flag">Established flag</param>
            <returns>Result enum value</returns>
            <remarks>
            	Contributed by nagits, http://about.me/AlekseyNagovitsyn
            </remarks>
        </member>
        <member name="M:EnumExtensions.SetFlags``1(System.Enum,``0[])">
            <summary>
            Includes flags and returns the new value
            </summary>
            <typeparam name="T">Enum type</typeparam>
            <param name="variable">Source enum</param>
            <param name="flags">Established flags</param>
            <returns>Result enum value</returns>
            <remarks>
            	Contributed by nagits, http://about.me/AlekseyNagovitsyn
            </remarks>
        </member>
        <member name="M:EnumExtensions.HasFlags``1(``0,``0[])">
            <summary>
            Check to see if enumeration has a specific flag set
            </summary>
            <param name="variable">Enumeration to check</param>
            <param name="flags">Flags to check for</param>
            <returns>Result of check</returns>
            <remarks>
            	Contributed by nagits, http://about.me/AlekseyNagovitsyn
            </remarks>
        </member>
        <member name="M:EnumExtensions.DisplayString(System.Enum)">
            <summary>
            Description, specified by attribute <c>DisplayStringAttribute</c>.
            <para>If the attribute is not specified, returns the default name obtained by the method <c>ToString()</c></para>
            </summary>
            <param name="value"></param>
            <returns>
            Returns the description given by the attribute <c>DisplayStringAttribute</c>. 
            <para>If the attribute is not specified, returns the default name obtained by the method <c>ToString()</c></para>
            </returns>
            <see cref="T:DisplayStringAttribute"/>
            <example>
                <code>
                    enum OperatingSystem
                    {
                       [DisplayString("MS-DOS")]
                       Msdos,
                    
                       [DisplayString("Windows 98")]
                       Win98,
                    
                       [DisplayString("Windows XP")]
                       Xp,
                    
                       [DisplayString("Windows Vista")]
                       Vista,
                    
                       [DisplayString("Windows 7")]
                       Seven,
                    }
                    
                    public string GetMyOSName()
                    {
                        var myOS = OperatingSystem.Seven;
                        return myOS.DisplayString();
                    }
                </code>
            </example>
            <remarks>
            	Contributed by nagits, http://about.me/AlekseyNagovitsyn
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EventHandlerExtenders.RaiseEvent``1(System.EventHandler{``0},System.Object,``0)" -->
        <!-- Badly formed XML comment ignored for member "M:EventHandlerExtenders.RaiseEventOnUIThread``1(System.EventHandler{``0},System.Object,``0)" -->
        <member name="T:ExtensionMethodSetting">
            <summary>
            Allows developer to set default values for CultureInfo and Encoding
            </summary>
            <remarks>Added by Jtolar</remarks>
        </member>
        <member name="M:ExtensionMethodSetting.#cctor">
            <summary>
            Initializes a static instance of the ExtensionMethodsSettings class
            </summary>
        </member>
        <member name="P:ExtensionMethodSetting.DefaultEncoding">
            <summary>
            Gets or Sets the default encoding scheme extension methods should use
            </summary>
            <remarks>
            The default value for this property is <see cref="P:System.Text.Encoding.UTF8"/>
            </remarks>
        </member>
        <member name="P:ExtensionMethodSetting.DefaultCulture">
            <summary>
            Gets or Sets the default culture information extension methods should use
            </summary>
            <remarks>
            The default value for this property is <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/>
            </remarks>
        </member>
        <member name="T:FloatExtensions">
            <summary>
            	Extension methods for the Float data type
            </summary>
        </member>
        <member name="M:FloatExtensions.InRange(System.Single,System.Single,System.Single)">
            <summary>Checks whether the value is in range</summary>
            <param name="value">The Value</param>
            <param name="minValue">The minimum value</param>
            <param name="maxValue">The maximum value</param>
        </member>
        <member name="M:FloatExtensions.InRange(System.Single,System.Single,System.Single,System.Single)">
            <summary>Checks whether the value is in range or returns the default value</summary>
            <param name="value">The Value</param>
            <param name="minValue">The minimum value</param>
            <param name="maxValue">The maximum value</param>
            <param name="defaultValue">The default value</param>
        </member>
        <member name="M:FloatExtensions.Days(System.Single)">
            <summary>
            Gets a TimeSpan from a float number of days.
            </summary>
            <param name="days">The number of days the TimeSpan will contain.</param>
            <returns>A TimeSpan containing the specified number of days.</returns>
            <remarks>
            	Contributed by jceddy
            </remarks>
        </member>
        <member name="M:FloatExtensions.Hours(System.Single)">
            <summary>
            Gets a TimeSpan from a float number of hours.
            </summary>
            <param name="days">The number of hours the TimeSpan will contain.</param>
            <returns>A TimeSpan containing the specified number of hours.</returns>
            <remarks>
            	Contributed by jceddy
            </remarks>
        </member>
        <member name="M:FloatExtensions.Milliseconds(System.Single)">
            <summary>
            Gets a TimeSpan from a float number of milliseconds.
            </summary>
            <param name="days">The number of milliseconds the TimeSpan will contain.</param>
            <returns>A TimeSpan containing the specified number of milliseconds.</returns>
            <remarks>
            	Contributed by jceddy
            </remarks>
        </member>
        <member name="M:FloatExtensions.Minutes(System.Single)">
            <summary>
            Gets a TimeSpan from a float number of minutes.
            </summary>
            <param name="days">The number of minutes the TimeSpan will contain.</param>
            <returns>A TimeSpan containing the specified number of minutes.</returns>
            <remarks>
            	Contributed by jceddy
            </remarks>
        </member>
        <member name="M:FloatExtensions.Seconds(System.Single)">
            <summary>
            Gets a TimeSpan from a float number of seconds.
            </summary>
            <param name="days">The number of seconds the TimeSpan will contain.</param>
            <returns>A TimeSpan containing the specified number of seconds.</returns>
            <remarks>
            	Contributed by jceddy
            </remarks>
        </member>
        <member name="T:LongExtensions">
            <summary>
            	Extension methods for the Long data type
            </summary>
        </member>
        <member name="M:LongExtensions.Times(System.Int64,System.Action)">
            <summary>
            	Performs the specified action n times based on the underlying long value.
            </summary>
            <param name = "value">The value.</param>
            <param name = "action">The action.</param>
        </member>
        <member name="M:LongExtensions.Times(System.Int64,System.Action{System.Int64})">
            <summary>
            	Performs the specified action n times based on the underlying long value.
            </summary>
            <param name = "value">The value.</param>
            <param name = "action">The action.</param>
        </member>
        <member name="M:LongExtensions.IsEven(System.Int64)">
            <summary>
            	Determines whether the value is even
            </summary>
            <param name = "value">The Value</param>
            <returns>true or false</returns>
        </member>
        <member name="M:LongExtensions.IsOdd(System.Int64)">
            <summary>
            	Determines whether the value is odd
            </summary>
            <param name = "value">The Value</param>
            <returns>true or false</returns>
        </member>
        <member name="M:LongExtensions.InRange(System.Int64,System.Int64,System.Int64)">
            <summary>Checks whether the value is in range</summary>
            <param name="value">The Value</param>
            <param name="minValue">The minimum value</param>
            <param name="maxValue">The maximum value</param>
        </member>
        <member name="M:LongExtensions.InRange(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>Checks whether the value is in range or returns the default value</summary>
            <param name="value">The Value</param>
            <param name="minValue">The minimum value</param>
            <param name="maxValue">The maximum value</param>
            <param name="defaultValue">The default value</param>
        </member>
        <member name="M:LongExtensions.IsPrime(System.Int64)">
            <summary>
            A prime number (or a prime) is a natural number that has exactly two distinct natural number divisors: 1 and itself.
            </summary>
            <param name="candidate">Object value</param>
            <returns>Returns true if the value is a prime number.</returns>
        </member>
        <member name="M:LongExtensions.ToOrdinal(System.Int64)">
            <summary>
            Converts the value to ordinal string. (English)
            </summary>
            <param name="i">Object value</param>
            <returns>Returns string containing ordinal indicator adjacent to a numeral denoting. (English)</returns>
        </member>
        <member name="M:LongExtensions.ToOrdinal(System.Int64,System.String)">
            <summary>
            Converts the value to ordinal string with specified format. (English)
            </summary>
            <param name="i">Object value</param>
            <param name="format">A standard or custom format string that is supported by the object to be formatted.</param>
            <returns>Returns string containing ordinal indicator adjacent to a numeral denoting. (English)</returns>
        </member>
        <member name="M:LongExtensions.Days(System.Int64)">
            <summary>
            Gets a TimeSpan from a long number of days.
            </summary>
            <param name="days">The number of days the TimeSpan will contain.</param>
            <returns>A TimeSpan containing the specified number of days.</returns>
            <remarks>
            	Contributed by jceddy
            </remarks>
        </member>
        <member name="M:LongExtensions.Hours(System.Int64)">
            <summary>
            Gets a TimeSpan from a long number of hours.
            </summary>
            <param name="days">The number of hours the TimeSpan will contain.</param>
            <returns>A TimeSpan containing the specified number of hours.</returns>
            <remarks>
            	Contributed by jceddy
            </remarks>
        </member>
        <member name="M:LongExtensions.Milliseconds(System.Int64)">
            <summary>
            Gets a TimeSpan from a long number of milliseconds.
            </summary>
            <param name="days">The number of milliseconds the TimeSpan will contain.</param>
            <returns>A TimeSpan containing the specified number of milliseconds.</returns>
            <remarks>
            	Contributed by jceddy
            </remarks>
        </member>
        <member name="M:LongExtensions.Minutes(System.Int64)">
            <summary>
            Gets a TimeSpan from a long number of minutes.
            </summary>
            <param name="days">The number of minutes the TimeSpan will contain.</param>
            <returns>A TimeSpan containing the specified number of minutes.</returns>
            <remarks>
            	Contributed by jceddy
            </remarks>
        </member>
        <member name="M:LongExtensions.Seconds(System.Int64)">
            <summary>
            Gets a TimeSpan from a long number of seconds.
            </summary>
            <param name="days">The number of seconds the TimeSpan will contain.</param>
            <returns>A TimeSpan containing the specified number of seconds.</returns>
            <remarks>
            	Contributed by jceddy
            </remarks>
        </member>
        <member name="M:LongExtensions.Ticks(System.Int64)">
            <summary>
            Gets a TimeSpan from a long number of ticks.
            </summary>
            <param name="days">The number of ticks the TimeSpan will contain.</param>
            <returns>A TimeSpan containing the specified number of ticks.</returns>
            <remarks>
            	Contributed by jceddy
            </remarks>
        </member>
        <member name="T:PrincipalExtensions">
            <summary>
            Extension methods for the Princiapl data type
            </summary>
        </member>
        <member name="M:PrincipalExtensions.GetProperty(System.DirectoryServices.AccountManagement.Principal,System.String)">
            <summary>
            Gets property value of a Principals underlying DirectoryEntry object.
            </summary>
            <param name="principal">The principal.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:DataReaderExtensions">
            <summary>
            	Extension methods for all kind of ADO.NET DataReaders (SqlDataReader, OracleDataReader, ...)
            </summary>
        </member>
        <member name="M:DataReaderExtensions.Get``1(System.Data.IDataReader,System.String)">
            <summary>
            	Gets the record value casted to the specified data type or the data types default value.
            </summary>
            <typeparam name = "T">The return data type</typeparam>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.Get``1(System.Data.IDataReader,System.String,``0)">
            <summary>
            	Gets the record value casted to the specified data type or the specified default value.
            </summary>
            <typeparam name = "T">The return data type</typeparam>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.GetBytes(System.Data.IDataReader,System.String)">
            <summary>
            	Gets the record value casted as byte array.
            </summary>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.GetString(System.Data.IDataReader,System.String)">
            <summary>
            	Gets the record value casted as string or null.
            </summary>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.GetString(System.Data.IDataReader,System.String,System.String)">
            <summary>
            	Gets the record value casted as string or the specified default value.
            </summary>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.GetGuid(System.Data.IDataReader,System.String)">
            <summary>
            	Gets the record value casted as Guid or Guid.Empty.
            </summary>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.GetNullableGuid(System.Data.IDataReader,System.String)">
            <summary>
            	Gets the record value casted as Guid? or null.
            </summary>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.GetDateTime(System.Data.IDataReader,System.String)">
            <summary>
            	Gets the record value casted as DateTime or DateTime.MinValue.
            </summary>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.GetDateTime(System.Data.IDataReader,System.String,System.DateTime)">
            <summary>
            	Gets the record value casted as DateTime or the specified default value.
            </summary>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.GetNullableDateTime(System.Data.IDataReader,System.String)">
            <summary>
            	Gets the record value casted as DateTime or null.
            </summary>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.GetDateTimeOffset(System.Data.IDataReader,System.String)">
            <summary>
            	Gets the record value casted as DateTimeOffset (UTC) or DateTime.MinValue.
            </summary>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.GetDateTimeOffset(System.Data.IDataReader,System.String,System.DateTimeOffset)">
            <summary>
            	Gets the record value casted as DateTimeOffset (UTC) or the specified default value.
            </summary>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.GetNullableDateTimeOffset(System.Data.IDataReader,System.String)">
            <summary>
            	Gets the record value casted as DateTimeOffset (UTC) or null.
            </summary>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.GetInt32(System.Data.IDataReader,System.String)">
            <summary>
            	Gets the record value casted as int or 0.
            </summary>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.GetInt32(System.Data.IDataReader,System.String,System.Int32)">
            <summary>
            	Gets the record value casted as int or the specified default value.
            </summary>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.GetNullableInt32(System.Data.IDataReader,System.String)">
            <summary>
            	Gets the record value casted as int or null.
            </summary>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.GetInt64(System.Data.IDataReader,System.String)">
            <summary>
            	Gets the record value casted as long or 0.
            </summary>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.GetInt64(System.Data.IDataReader,System.String,System.Int32)">
            <summary>
            	Gets the record value casted as long or the specified default value.
            </summary>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.GetNullableInt64(System.Data.IDataReader,System.String)">
            <summary>
            	Gets the record value casted as long or null.
            </summary>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.GetDecimal(System.Data.IDataReader,System.String)">
            <summary>
            	Gets the record value casted as decimal or 0.
            </summary>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.GetDecimal(System.Data.IDataReader,System.String,System.Int64)">
            <summary>
            	Gets the record value casted as decimal or the specified default value.
            </summary>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.GetNullableDecimal(System.Data.IDataReader,System.String)">
            <summary>
            	Gets the record value casted as decimal or null.
            </summary>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.GetBoolean(System.Data.IDataReader,System.String)">
            <summary>
            	Gets the record value casted as bool or false.
            </summary>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.GetBoolean(System.Data.IDataReader,System.String,System.Boolean)">
            <summary>
            	Gets the record value casted as bool or the specified default value.
            </summary>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.GetNullableBoolean(System.Data.IDataReader,System.String)">
            <summary>
            	Gets the record value casted as bool or null.
            </summary>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.GetType(System.Data.IDataReader,System.String)">
            <summary>
            	Gets the record value as Type class instance or null.
            </summary>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.GetType(System.Data.IDataReader,System.String,System.Type)">
            <summary>
            	Gets the record value as Type class instance or the specified default value.
            </summary>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.GetTypeInstance(System.Data.IDataReader,System.String)">
            <summary>
            	Gets the record value as class instance from a type name or null.
            </summary>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.GetTypeInstance(System.Data.IDataReader,System.String,System.Type)">
            <summary>
            	Gets the record value as class instance from a type name or the specified default type.
            </summary>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.GetTypeInstance``1(System.Data.IDataReader,System.String)">
            <summary>
            	Gets the record value as class instance from a type name or null.
            </summary>
            <typeparam name = "T">The type to be casted to</typeparam>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.GetTypeInstanceSafe``1(System.Data.IDataReader,System.String,System.Type)">
            <summary>
            	Gets the record value as class instance from a type name or the specified default type.
            </summary>
            <typeparam name = "T">The type to be casted to</typeparam>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "type">The type.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.GetTypeInstanceSafe``1(System.Data.IDataReader,System.String)">
            <summary>
            	Gets the record value as class instance from a type name or an instance from the specified type.
            </summary>
            <typeparam name = "T">The type to be casted to</typeparam>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataReaderExtensions.IsDBNull(System.Data.IDataReader,System.String)">
            <summary>
            	Determines whether the record value is DBNull.Value
            </summary>
            <param name = "reader">The data reader.</param>
            <param name = "field">The name of the record field.</param>
            <returns>
            	<c>true</c> if the value is DBNull.Value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DataReaderExtensions.ReadAll(System.Data.IDataReader,System.Action{System.Data.IDataReader})">
            <summary>
            	Reads all all records from a data reader and performs an action for each.
            </summary>
            <param name = "reader">The data reader.</param>
            <param name = "action">The action to be performed.</param>
            <returns>
            	The count of actions that were performed.
            </returns>
        </member>
        <member name="M:DataReaderExtensions.IndexOf(System.Data.IDataRecord,System.String)">
            <summary>
            Returns the index of a column by name (case insensitive) or -1
            </summary>
            <param name="this"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:DataRowExtensions">
            <summary>
            	Extension methods for ADO.NET DataRows (DataTable / DataSet)
            </summary>
        </member>
        <member name="M:DataRowExtensions.Get``1(System.Data.DataRow,System.String)">
            <summary>
            	Gets the record value casted to the specified data type or the data types default value.
            </summary>
            <typeparam name = "T">The return data type</typeparam>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowExtensions.Get``1(System.Data.DataRow,System.String,``0)">
            <summary>
            	Gets the record value casted to the specified data type or the specified default value.
            </summary>
            <typeparam name = "T">The return data type</typeparam>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowExtensions.GetBytes(System.Data.DataRow,System.String)">
            <summary>
            	Gets the record value casted as byte array.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowExtensions.GetString(System.Data.DataRow,System.String)">
            <summary>
            	Gets the record value casted as string or null.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowExtensions.GetString(System.Data.DataRow,System.String,System.String)">
            <summary>
            	Gets the record value casted as string or the specified default value.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowExtensions.GetGuid(System.Data.DataRow,System.String)">
            <summary>
            	Gets the record value casted as Guid or Guid.Empty.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowExtensions.GetDateTime(System.Data.DataRow,System.String)">
            <summary>
            	Gets the record value casted as DateTime or DateTime.MinValue.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowExtensions.GetDateTime(System.Data.DataRow,System.String,System.DateTime)">
            <summary>
            	Gets the record value casted as DateTime or the specified default value.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowExtensions.GetDateTimeOffset(System.Data.DataRow,System.String)">
            <summary>
            	Gets the record value casted as DateTimeOffset (UTC) or DateTime.MinValue.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowExtensions.GetDateTimeOffset(System.Data.DataRow,System.String,System.DateTimeOffset)">
            <summary>
            	Gets the record value casted as DateTimeOffset (UTC) or the specified default value.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowExtensions.GetInt32(System.Data.DataRow,System.String)">
            <summary>
            	Gets the record value casted as int or 0.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowExtensions.GetInt32(System.Data.DataRow,System.String,System.Int32)">
            <summary>
            	Gets the record value casted as int or the specified default value.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowExtensions.GetInt64(System.Data.DataRow,System.String)">
            <summary>
            	Gets the record value casted as long or 0.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowExtensions.GetInt64(System.Data.DataRow,System.String,System.Int32)">
            <summary>
            	Gets the record value casted as long or the specified default value.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowExtensions.GetDecimal(System.Data.DataRow,System.String)">
            <summary>
            	Gets the record value casted as decimal or 0.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowExtensions.GetDecimal(System.Data.DataRow,System.String,System.Int64)">
            <summary>
            	Gets the record value casted as decimal or the specified default value.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowExtensions.GetBoolean(System.Data.DataRow,System.String)">
            <summary>
            	Gets the record value casted as bool or false.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowExtensions.GetBoolean(System.Data.DataRow,System.String,System.Boolean)">
            <summary>
            	Gets the record value casted as bool or the specified default value.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowExtensions.GetType(System.Data.DataRow,System.String)">
            <summary>
            	Gets the record value as Type class instance or null.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowExtensions.GetType(System.Data.DataRow,System.String,System.Type)">
            <summary>
            	Gets the record value as Type class instance or the specified default value.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowExtensions.GetTypeInstance(System.Data.DataRow,System.String)">
            <summary>
            	Gets the record value as class instance from a type name or null.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowExtensions.GetTypeInstance(System.Data.DataRow,System.String,System.Type)">
            <summary>
            	Gets the record value as class instance from a type name or the specified default type.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowExtensions.GetTypeInstance``1(System.Data.DataRow,System.String)">
            <summary>
            	Gets the record value as class instance from a type name or null.
            </summary>
            <typeparam name = "T">The type to be casted to</typeparam>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowExtensions.GetTypeInstanceSafe``1(System.Data.DataRow,System.String,System.Type)">
            <summary>
            	Gets the record value as class instance from a type name or the specified default type.
            </summary>
            <typeparam name = "T">The type to be casted to</typeparam>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "type">The type.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowExtensions.GetTypeInstanceSafe``1(System.Data.DataRow,System.String)">
            <summary>
            	Gets the record value as class instance from a type name or an instance from the specified type.
            </summary>
            <typeparam name = "T">The type to be casted to</typeparam>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowExtensions.IsDBNull(System.Data.DataRow,System.String)">
            <summary>
            	Determines whether the record value is DBNull.Value
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <returns>
            	<c>true</c> if the value is DBNull.Value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:DataRowViewViewExtensions">
            <summary>
            	Extension methods for ADO.NET DataRowViewViews (DataView / DataTable / DataSet)
            </summary>
        </member>
        <member name="M:DataRowViewViewExtensions.Get``1(System.Data.DataRowView,System.String)">
            <summary>
            	Gets the record value casted to the specified data type or the data types default value.
            </summary>
            <typeparam name = "T">The return data type</typeparam>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowViewViewExtensions.Get``1(System.Data.DataRowView,System.String,``0)">
            <summary>
            	Gets the record value casted to the specified data type or the specified default value.
            </summary>
            <typeparam name = "T">The return data type</typeparam>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowViewViewExtensions.GetBytes(System.Data.DataRowView,System.String)">
            <summary>
            	Gets the record value casted as byte array.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowViewViewExtensions.GetString(System.Data.DataRowView,System.String)">
            <summary>
            	Gets the record value casted as string or null.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowViewViewExtensions.GetString(System.Data.DataRowView,System.String,System.String)">
            <summary>
            	Gets the record value casted as string or the specified default value.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowViewViewExtensions.GetGuid(System.Data.DataRowView,System.String)">
            <summary>
            	Gets the record value casted as Guid or Guid.Empty.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowViewViewExtensions.GetDateTime(System.Data.DataRowView,System.String)">
            <summary>
            	Gets the record value casted as DateTime or DateTime.MinValue.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowViewViewExtensions.GetDateTime(System.Data.DataRowView,System.String,System.DateTime)">
            <summary>
            	Gets the record value casted as DateTime or the specified default value.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowViewViewExtensions.GetDateTimeOffset(System.Data.DataRowView,System.String)">
            <summary>
            	Gets the record value casted as DateTimeOffset (UTC) or DateTime.MinValue.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowViewViewExtensions.GetDateTimeOffset(System.Data.DataRowView,System.String,System.DateTimeOffset)">
            <summary>
            	Gets the record value casted as DateTimeOffset (UTC) or the specified default value.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowViewViewExtensions.GetInt32(System.Data.DataRowView,System.String)">
            <summary>
            	Gets the record value casted as int or 0.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowViewViewExtensions.GetInt32(System.Data.DataRowView,System.String,System.Int32)">
            <summary>
            	Gets the record value casted as int or the specified default value.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowViewViewExtensions.GetInt64(System.Data.DataRowView,System.String)">
            <summary>
            	Gets the record value casted as long or 0.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowViewViewExtensions.GetInt64(System.Data.DataRowView,System.String,System.Int32)">
            <summary>
            	Gets the record value casted as long or the specified default value.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowViewViewExtensions.GetDecimal(System.Data.DataRowView,System.String)">
            <summary>
            	Gets the record value casted as decimal or 0.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowViewViewExtensions.GetDecimal(System.Data.DataRowView,System.String,System.Int64)">
            <summary>
            	Gets the record value casted as decimal or the specified default value.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowViewViewExtensions.GetBoolean(System.Data.DataRowView,System.String)">
            <summary>
            	Gets the record value casted as bool or false.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowViewViewExtensions.GetBoolean(System.Data.DataRowView,System.String,System.Boolean)">
            <summary>
            	Gets the record value casted as bool or the specified default value.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowViewViewExtensions.GetType(System.Data.DataRowView,System.String)">
            <summary>
            	Gets the record value as Type class instance or null.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowViewViewExtensions.GetType(System.Data.DataRowView,System.String,System.Type)">
            <summary>
            	Gets the record value as Type class instance or the specified default value.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowViewViewExtensions.GetTypeInstance(System.Data.DataRowView,System.String)">
            <summary>
            	Gets the record value as class instance from a type name or null.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowViewViewExtensions.GetTypeInstance(System.Data.DataRowView,System.String,System.Type)">
            <summary>
            	Gets the record value as class instance from a type name or the specified default type.
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowViewViewExtensions.GetTypeInstance``1(System.Data.DataRowView,System.String)">
            <summary>
            	Gets the record value as class instance from a type name or null.
            </summary>
            <typeparam name = "T">The type to be casted to</typeparam>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowViewViewExtensions.GetTypeInstanceSafe``1(System.Data.DataRowView,System.String,System.Type)">
            <summary>
            	Gets the record value as class instance from a type name or the specified default type.
            </summary>
            <typeparam name = "T">The type to be casted to</typeparam>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <param name = "type">The type.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowViewViewExtensions.GetTypeInstanceSafe``1(System.Data.DataRowView,System.String)">
            <summary>
            	Gets the record value as class instance from a type name or an instance from the specified type.
            </summary>
            <typeparam name = "T">The type to be casted to</typeparam>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <returns>The record value</returns>
        </member>
        <member name="M:DataRowViewViewExtensions.IsDBNull(System.Data.DataRowView,System.String)">
            <summary>
            	Determines whether the record value is DBNull.Value
            </summary>
            <param name = "row">The data row.</param>
            <param name = "field">The name of the record field.</param>
            <returns>
            	<c>true</c> if the value is DBNull.Value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:DateTimeExtensions">
            <summary>
            	Extension methods for the DateTimeOffset data type.
            </summary>
        </member>
        <member name="P:DateTimeExtensions.UtcOffset">
            <summary>
            	Return System UTC Offset
            </summary>
        </member>
        <member name="M:DateTimeExtensions.CalculateAge(System.DateTime)">
            <summary>
            	Calculates the age based on today.
            </summary>
            <param name = "dateOfBirth">The date of birth.</param>
            <returns>The calculated age.</returns>
        </member>
        <member name="M:DateTimeExtensions.CalculateAge(System.DateTime,System.DateTime)">
            <summary>
            	Calculates the age based on a passed reference date.
            </summary>
            <param name = "dateOfBirth">The date of birth.</param>
            <param name = "referenceDate">The reference date to calculate on.</param>
            <returns>The calculated age.</returns>
        </member>
        <member name="M:DateTimeExtensions.GetCountDaysOfMonth(System.DateTime)">
            <summary>
            	Returns the number of days in the month of the provided date.
            </summary>
            <param name = "date">The date.</param>
            <returns>The number of days.</returns>
        </member>
        <member name="M:DateTimeExtensions.GetFirstDayOfMonth(System.DateTime)">
            <summary>
            	Returns the first day of the month of the provided date.
            </summary>
            <param name = "date">The date.</param>
            <returns>The first day of the month</returns>
        </member>
        <member name="M:DateTimeExtensions.GetFirstDayOfMonth(System.DateTime,System.DayOfWeek)">
            <summary>
            	Returns the first day of the month of the provided date.
            </summary>
            <param name = "date">The date.</param>
            <param name = "dayOfWeek">The desired day of week.</param>
            <returns>The first day of the month</returns>
        </member>
        <member name="M:DateTimeExtensions.GetLastDayOfMonth(System.DateTime)">
            <summary>
            	Returns the last day of the month of the provided date.
            </summary>
            <param name = "date">The date.</param>
            <returns>The last day of the month.</returns>
        </member>
        <member name="M:DateTimeExtensions.GetLastDayOfMonth(System.DateTime,System.DayOfWeek)">
            <summary>
            	Returns the last day of the month of the provided date.
            </summary>
            <param name = "date">The date.</param>
            <param name = "dayOfWeek">The desired day of week.</param>
            <returns>The date time</returns>
        </member>
        <member name="M:DateTimeExtensions.IsToday(System.DateTime)">
            <summary>
            	Indicates whether the date is today.
            </summary>
            <param name = "dt">The date.</param>
            <returns>
            	<c>true</c> if the specified date is today; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DateTimeExtensions.SetTime(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Sets the time on the specified DateTime value.
            </summary>
            <param name = "date">The base date.</param>
            <param name = "hours">The hours to be set.</param>
            <param name = "minutes">The minutes to be set.</param>
            <param name = "seconds">The seconds to be set.</param>
            <returns>The DateTime including the new time value</returns>
        </member>
        <member name="M:DateTimeExtensions.SetTime(System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Sets the time on the specified DateTime value.
            </summary>
            <param name = "date">The base date.</param>
            <param name="hours">The hour</param>
            <param name="minutes">The minute</param>
            <param name="seconds">The second</param>
            <param name="milliseconds">The millisecond</param>
            <returns>The DateTime including the new time value</returns>
            <remarks>Added overload for milliseconds - jtolar</remarks>
        </member>
        <member name="M:DateTimeExtensions.SetTime(System.DateTime,System.TimeSpan)">
            <summary>
            	Sets the time on the specified DateTime value.
            </summary>
            <param name = "date">The base date.</param>
            <param name = "time">The TimeSpan to be applied.</param>
            <returns>
            	The DateTime including the new time value
            </returns>
        </member>
        <member name="M:DateTimeExtensions.ToDateTimeOffset(System.DateTime)">
            <summary>
            	Converts a DateTime into a DateTimeOffset using the local system time zone.
            </summary>
            <param name = "localDateTime">The local DateTime.</param>
            <returns>The converted DateTimeOffset</returns>
        </member>
        <member name="M:DateTimeExtensions.ToDateTimeOffset(System.DateTime,System.TimeZoneInfo)">
            <summary>
            	Converts a DateTime into a DateTimeOffset using the specified time zone.
            </summary>
            <param name = "localDateTime">The local DateTime.</param>
            <param name = "localTimeZone">The local time zone.</param>
            <returns>The converted DateTimeOffset</returns>
        </member>
        <member name="M:DateTimeExtensions.GetFirstDayOfWeek(System.DateTime)">
            <summary>
            	Gets the first day of the week using the current culture.
            </summary>
            <param name = "date">The date.</param>
            <returns>The first day of the week</returns>
            <remarks>
                modified by jtolar to implement culture settings
            </remarks>
        </member>
        <member name="M:DateTimeExtensions.GetFirstDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            	Gets the first day of the week using the specified culture.
            </summary>
            <param name = "date">The date.</param>
            <param name = "cultureInfo">The culture to determine the first weekday of a week.</param>
            <returns>The first day of the week</returns>
        </member>
        <member name="M:DateTimeExtensions.GetLastDayOfWeek(System.DateTime)">
            <summary>
            	Gets the last day of the week using the current culture.
            </summary>
            <param name = "date">The date.</param>
            <returns>The first day of the week</returns>
            <remarks>
                modified by jtolar to implement culture settings
            </remarks>
        </member>
        <member name="M:DateTimeExtensions.GetLastDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            	Gets the last day of the week using the specified culture.
            </summary>
            <param name = "date">The date.</param>
            <param name = "cultureInfo">The culture to determine the first weekday of a week.</param>
            <returns>The first day of the week</returns>
        </member>
        <member name="M:DateTimeExtensions.GetWeeksWeekday(System.DateTime,System.DayOfWeek)">
            <summary>
            	Gets the next occurence of the specified weekday within the current week using the current culture.
            </summary>
            <param name = "date">The base date.</param>
            <param name = "weekday">The desired weekday.</param>
            <returns>The calculated date.</returns>
            <example>
            	<code>
            		var thisWeeksMonday = DateTime.Now.GetWeekday(DayOfWeek.Monday);
            	</code>
            </example>
            <remarks>
                modified by jtolar to implement culture settings
            </remarks>
        </member>
        <member name="M:DateTimeExtensions.GetWeeksWeekday(System.DateTime,System.DayOfWeek,System.Globalization.CultureInfo)">
            <summary>
            	Gets the next occurence of the specified weekday within the current week using the specified culture.
            </summary>
            <param name = "date">The base date.</param>
            <param name = "weekday">The desired weekday.</param>
            <param name = "cultureInfo">The culture to determine the first weekday of a week.</param>
            <returns>The calculated date.</returns>
            <example>
            	<code>
            		var thisWeeksMonday = DateTime.Now.GetWeekday(DayOfWeek.Monday);
            	</code>
            </example>
        </member>
        <member name="M:DateTimeExtensions.GetNextWeekday(System.DateTime,System.DayOfWeek)">
            <summary>
            	Gets the next occurence of the specified weekday.
            </summary>
            <param name = "date">The base date.</param>
            <param name = "weekday">The desired weekday.</param>
            <returns>The calculated date.</returns>
            <example>
            	<code>
            		var lastMonday = DateTime.Now.GetNextWeekday(DayOfWeek.Monday);
            	</code>
            </example>
        </member>
        <member name="M:DateTimeExtensions.GetPreviousWeekday(System.DateTime,System.DayOfWeek)">
            <summary>
            	Gets the previous occurence of the specified weekday.
            </summary>
            <param name = "date">The base date.</param>
            <param name = "weekday">The desired weekday.</param>
            <returns>The calculated date.</returns>
            <example>
            	<code>
            		var lastMonday = DateTime.Now.GetPreviousWeekday(DayOfWeek.Monday);
            	</code>
            </example>
        </member>
        <member name="M:DateTimeExtensions.IsDateEqual(System.DateTime,System.DateTime)">
            <summary>
            	Determines whether the date only part of twi DateTime values are equal.
            </summary>
            <param name = "date">The date.</param>
            <param name = "dateToCompare">The date to compare with.</param>
            <returns>
            	<c>true</c> if both date values are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DateTimeExtensions.IsTimeEqual(System.DateTime,System.DateTime)">
            <summary>
            	Determines whether the time only part of two DateTime values are equal.
            </summary>
            <param name = "time">The time.</param>
            <param name = "timeToCompare">The time to compare.</param>
            <returns>
            	<c>true</c> if both time values are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DateTimeExtensions.GetMillisecondsSince1970(System.DateTime)">
            <summary>
            	Get milliseconds of UNIX area. This is the milliseconds since 1/1/1970
            </summary>
            <param name = "datetime">Up to which time.</param>
            <returns>number of milliseconds.</returns>
            <remarks>
            	Contributed by blaumeister, http://www.codeplex.com/site/users/view/blaumeiser
            </remarks>
        </member>
        <member name="M:DateTimeExtensions.ToUnixEpoch(System.DateTime)">
            <summary>
            Get milliseconds of UNIX area. This is the milliseconds since 1/1/1970
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
            <remarks>This is the same as GetMillisecondsSince1970 but more descriptive</remarks>
        </member>
        <member name="M:DateTimeExtensions.IsWeekend(System.DateTime)">
            <summary>
            	Indicates whether the specified date is a weekend (Saturday or Sunday).
            </summary>
            <param name = "date">The date.</param>
            <returns>
            	<c>true</c> if the specified date is a weekend; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DateTimeExtensions.AddWeeks(System.DateTime,System.Int32)">
            <summary>
            	Adds the specified amount of weeks (=7 days gregorian calendar) to the passed date value.
            </summary>
            <param name = "date">The origin date.</param>
            <param name = "value">The amount of weeks to be added.</param>
            <returns>The enw date value</returns>
        </member>
        <member name="M:DateTimeExtensions.GetDays(System.Int32)">
            <summary>
            	Get the number of days within that year.
            </summary>
            <param name = "year">The year.</param>
            <returns>the number of days within that year</returns>
             <remarks>
             	Contributed by Michael T, http://about.me/MichaelTran
                 Modified by JTolar to implement Culture Settings
             </remarks>
        </member>
        <member name="M:DateTimeExtensions.GetDays(System.Int32,System.Globalization.CultureInfo)">
            <summary>
            	Get the number of days within that year. Uses the culture specified.
            </summary>
            <param name = "year">The year.</param>
            <param name="culture">Specific culture</param>
            <returns>the number of days within that year</returns>
             <remarks>
             	Contributed by Michael T, http://about.me/MichaelTran
                 Modified by JTolar to implement Culture Settings
             </remarks>
        </member>
        <member name="M:DateTimeExtensions.GetDays(System.DateTime)">
            <summary>
            	Get the number of days within that date year. Allows user to specify culture.
            </summary>
            <param name = "date">The date.</param>
            <param name="culture">Specific culture</param>
            <returns>the number of days within that year</returns>
             <remarks>
             	Contributed by Michael T, http://about.me/MichaelTran
                 Modified by JTolar to implement Culture Settings 
             </remarks>
        </member>
        <member name="M:DateTimeExtensions.GetDays(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            	Get the number of days within that date year. Allows user to specify culture
            </summary>
            <param name = "date">The date.</param>
            <param name="culture">Specific culture</param>
            <returns>the number of days within that year</returns>
             <remarks>
             	Contributed by Michael T, http://about.me/MichaelTran
                 Modified by JTolar to implement Culture Settings 
             </remarks>
        </member>
        <member name="M:DateTimeExtensions.GetDays(System.DateTime,System.DateTime)">
            <summary>
            	Get the number of days between two dates.
            </summary>
            <param name = "fromDate">The origin year.</param>
            <param name = "toDate">To year</param>
            <returns>The number of days between the two years</returns>
             <remarks>
             	Contributed by Michael T, http://about.me/MichaelTran
             </remarks>
        </member>
        <member name="M:DateTimeExtensions.GetPeriodOfDay(System.DateTime)">
            <summary>
            	Return a period "Morning", "Afternoon", or "Evening"
            </summary>
            <param name = "date">The date.</param>
            <returns>The period "morning", "afternoon", or "evening"</returns>
             <remarks>
             	Contributed by Michael T, http://about.me/MichaelTran
             </remarks>
        </member>
        <member name="M:DateTimeExtensions.GetWeekOfYear(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Gets the week number for a provided date time value based on a specific culture.
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="culture">Specific culture</param>
            <returns>The week number</returns>
            <remarks>
                modified by jtolar to implement culture settings
            </remarks>
        </member>
        <member name="M:DateTimeExtensions.GetWeekOfYear(System.DateTime)">
            <summary>
            Gets the week number for a provided date time value based on the current culture settings. 
            Uses DefaultCulture from ExtensionMethodSetting
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>The week number</returns>
            <remarks>
                modified by jtolar to implement culture settings
            </remarks>
        </member>
        <member name="M:DateTimeExtensions.IsEaster(System.DateTime)">
            <summary>
                Indicates whether the specified date is Easter in the Christian calendar.
            </summary>
            <param name="date">Instance value.</param>
            <returns>True if the instance value is a valid Easter Date.</returns>
        </member>
        <member name="M:DateTimeExtensions.IsBefore(System.DateTime,System.DateTime)">
            <summary>
                Indicates whether the source DateTime is before the supplied DateTime.
            </summary>
            <param name="source">The source DateTime.</param>
            <param name="other">The compared DateTime.</param>
            <returns>True if the source is before the other DateTime, False otherwise</returns>
        </member>
        <member name="M:DateTimeExtensions.IsAfter(System.DateTime,System.DateTime)">
            <summary>
                Indicates whether the source DateTime is before the supplied DateTime.
            </summary>
            <param name="source">The source DateTime.</param>
            <param name="other">The compared DateTime.</param>
            <returns>True if the source is before the other DateTime, False otherwise</returns>
        </member>
        <member name="M:DateTimeExtensions.Tomorrow(System.DateTime)">
            <summary>
            Gets a DateTime representing Next Day
            </summary>
            <param name="date">The current day</param>
            <returns></returns>
        </member>
        <member name="M:DateTimeExtensions.Yesterday(System.DateTime)">
            <summary>
            Gets a DateTime representing Previous Day
            </summary>
            <param name="date">The current day</param>
            <returns></returns>
        </member>
        <member name="M:DateTimeExtensions.ToFriendlyDateString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            The ToFriendlyString() method represents dates in a user friendly way. 
            For example, when displaying a news article on a webpage, you might want 
            articles that were published one day ago to have their publish dates 
            represented as "yesterday at 12:30 PM". Or if the article was publish today, 
            show the date as "Today, 3:33 PM".
            </summary>
            <param name="date">The date.</param>
            <param name="culture">Specific Culture</param>
            <returns>string</returns>
            <remarks>
                modified by jtolar to implement culture settings
            </remarks>/// <remarks></remarks>
        </member>
        <member name="M:DateTimeExtensions.ToFriendlyDateString(System.DateTime)">
            <summary>
             The ToFriendlyString() method represents dates in a user friendly way. 
             For example, when displaying a news article on a webpage, you might want 
             articles that were published one day ago to have their publish dates 
             represented as "yesterday at 12:30 PM". Or if the article was publish today, 
             show the date as "Today, 3:33 PM". Uses DefaultCulture from ExtensionMethodSetting.
             </summary>
             <param name="date">The date.</param>
             <returns>string</returns>
             <remarks>
                 modified by jtolar to implement culture settings
             </remarks>/// <remarks></remarks>
        </member>
        <member name="M:DateTimeExtensions.EndOfDay(System.DateTime)">
            <summary>
            Returns the date at 23:59.59.999 for the specified DateTime
            </summary>
            <param name="date">The DateTime to be processed</param>
            <returns>The date at 23:50.59.999</returns>
        </member>
        <member name="M:DateTimeExtensions.Noon(System.DateTime)">
            <summary>
            Returns the date at 12:00:00 for the specified DateTime
            </summary>
            <param name="time">The current date</param>
        </member>
        <member name="M:DateTimeExtensions.Midnight(System.DateTime)">
            <summary>
            Returns the date at 00:00:00 for the specified DateTime
            </summary>
            <param name="time">The current date</param>
        </member>
        <member name="M:DateTimeExtensions.IsWeekDay(System.DateTime)">
            <summary>
            Returns whether the DateTime falls on a weekday
            </summary>
            <param name="date">The date to be processed</param>
            <returns>Whether the specified date occurs on a weekday</returns>
        </member>
        <member name="T:DateTimeOffsetExtensions">
            <summary>
            	Extension methods for the DateTimeOffset data type.
            </summary>
        </member>
        <member name="M:DateTimeOffsetExtensions.IsToday(System.DateTimeOffset)">
            <summary>
            	Indicates whether the date is today.
            </summary>
            <param name = "dto">The date.</param>
            <returns>
            	<c>true</c> if the specified date is today; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DateTimeOffsetExtensions.SetTime(System.DateTimeOffset,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Sets the time on the specified DateTimeOffset value using the local system time zone.
            </summary>
            <param name = "date">The base date.</param>
            <param name = "hours">The hours to be set.</param>
            <param name = "minutes">The minutes to be set.</param>
            <param name = "seconds">The seconds to be set.</param>
            <returns>The DateTimeOffset including the new time value</returns>
        </member>
        <member name="M:DateTimeOffsetExtensions.SetTime(System.DateTimeOffset,System.TimeSpan)">
            <summary>
            	Sets the time on the specified DateTime value using the local system time zone.
            </summary>
            <param name = "date">The base date.</param>
            <param name = "time">The TimeSpan to be applied.</param>
            <returns>
            	The DateTimeOffset including the new time value
            </returns>
        </member>
        <member name="M:DateTimeOffsetExtensions.SetTime(System.DateTimeOffset,System.TimeSpan,System.TimeZoneInfo)">
            <summary>
            	Sets the time on the specified DateTime value using the specified time zone.
            </summary>
            <param name = "date">The base date.</param>
            <param name = "time">The TimeSpan to be applied.</param>
            <param name = "localTimeZone">The local time zone.</param>
            <returns>/// The DateTimeOffset including the new time value/// </returns>
        </member>
        <member name="M:DateTimeOffsetExtensions.ToLocalDateTime(System.DateTimeOffset)">
            <summary>
            	Converts a DateTimeOffset into a DateTime using the local system time zone.
            </summary>
            <param name = "dateTimeUtc">The base DateTimeOffset.</param>
            <returns>The converted DateTime</returns>
        </member>
        <member name="M:DateTimeOffsetExtensions.ToLocalDateTime(System.DateTimeOffset,System.TimeZoneInfo)">
            <summary>
            	Converts a DateTimeOffset into a DateTime using the specified time zone.
            </summary>
            <param name = "dateTimeUtc">The base DateTimeOffset.</param>
            <param name = "localTimeZone">The time zone to be used for conversion.</param>
            <returns>The converted DateTime</returns>
        </member>
        <member name="T:DictionaryExtensions">
            <summary>
            	Extension methods for Dictionary.
            </summary>
        </member>
        <member name="M:DictionaryExtensions.Sort``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Sorts the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <returns></returns>
        </member>
        <member name="M:DictionaryExtensions.Sort``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary to be sorted.</param>
            <param name="comparer">The comparer used to sort dictionary.</param>
            <returns></returns>
        </member>
        <member name="M:DictionaryExtensions.SortByValue``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Sorts the dictionary by value.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <returns></returns>
        </member>
        <member name="M:DictionaryExtensions.Invert``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Inverts the specified dictionary. (Creates a new dictionary with the values as key, and key as values)
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <returns></returns>
        </member>
        <member name="M:DictionaryExtensions.ToHashTable``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Creates a (non-generic) Hashtable from the Dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <returns></returns>
        </member>
        <member name="M:DictionaryExtensions.GetFirstValue``2(System.Collections.Generic.IDictionary{``0,``1},``1,``0[])">
            <summary>
            Returns the value of the first entry found with one of the <paramref name="keys"/> received.
            <para>Returns <paramref name="defaultValue"/> if none of the keys exists in this collection </para>
            </summary>
            <param name="defaultValue">Default value if none of the keys </param>
            <param name="keys"> keys to search for (in order) </param>
        </member>
        <member name="M:DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Returns the value associated with the specified key, or a default value if no element is found.
            </summary>
            <typeparam name="TKey">The key data type</typeparam>
            <typeparam name="TValue">The value data type</typeparam>
            <param name="source">The source dictionary.</param>
            <param name="key">The key of interest.</param>
            <returns>The value associated with the specified key if the key is found, the default value for the value data type if the key is not found</returns>
        </member>
        <member name="M:DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Returns the value associated with the specified key, or the specified default value if no element is found.
            </summary>
            <typeparam name="TKey">The key data type</typeparam>
            <typeparam name="TValue">The value data type</typeparam>
            <param name="source">The source dictionary.</param>
            <param name="key">The key of interest.</param>
            <param name="defaultValue">The default value to return if the key is not found.</param>
            <returns>The value associated with the specified key if the key is found, the specified default value if the key is not found</returns>
        </member>
        <member name="M:DictionaryExtensions.GetOrThrow``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Exception)">
            <summary>
            Returns the value associated with the specified key, or throw the specified exception if no element is found.
            </summary>
            <typeparam name="TKey">The key data type</typeparam>
            <typeparam name="TValue">The value data type</typeparam>
            <param name="source">The source dictionary.</param>
            <param name="key">The key of interest.</param>
            <param name="exception">The exception to throw if the key is not found.</param>
            <returns>The value associated with the specified key if the key is found, the specified exception is thrown if the key is not found</returns>
        </member>
        <member name="M:DictionaryExtensions.IsEmpty(System.Collections.IDictionary)">
            <summary>
            Tests if the collection is empty.
            </summary>
            <param name="collection">The collection to test.</param>
            <returns>True if the collection is empty.</returns>
        </member>
        <member name="M:DictionaryExtensions.IsEmpty``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Tests if the IDictionary is empty.
            </summary>
            <typeparam name="TKey">The type of the key of 
            the IDictionary.</typeparam>
            <typeparam name="TValue">The type of the values
            of the IDictionary.</typeparam>
            <param name="collection">The collection to test.</param>
            <returns>True if the collection is empty.</returns>
        </member>
        <member name="T:DirectoryInfoExtensions">
            <summary>
            	Extension methods for the DirectoryInfo class
            </summary>
        </member>
        <member name="M:DirectoryInfoExtensions.GetFiles(System.IO.DirectoryInfo,System.String[])">
            <summary>
            	Gets all files in the directory matching one of the several (!) supplied patterns (instead of just one in the regular implementation).
            </summary>
            <param name = "directory">The directory.</param>
            <param name = "patterns">The patterns.</param>
            <returns>The matching files</returns>
            <remarks>
            	This methods is quite perfect to be used in conjunction with the newly created FileInfo-Array extension methods.
            </remarks>
            <example>
            	<code>
            		var files = directory.GetFiles("*.txt", "*.xml");
            	</code>
            </example>
        </member>
        <member name="M:DirectoryInfoExtensions.FindFileRecursive(System.IO.DirectoryInfo,System.String)">
            <summary>
            	Searches the provided directory recursively and returns the first file matching the provided pattern.
            </summary>
            <param name = "directory">The directory.</param>
            <param name = "pattern">The pattern.</param>
            <returns>The found file</returns>
            <example>
            	<code>
            		var directory = new DirectoryInfo(@"c:\");
            		var file = directory.FindFileRecursive("win.ini");
            	</code>
            </example>
        </member>
        <member name="M:DirectoryInfoExtensions.FindFileRecursive(System.IO.DirectoryInfo,System.Func{System.IO.FileInfo,System.Boolean})">
            <summary>
            	Searches the provided directory recursively and returns the first file matching to the provided predicate.
            </summary>
            <param name = "directory">The directory.</param>
            <param name = "predicate">The predicate.</param>
            <returns>The found file</returns>
            <example>
            	<code>
            		var directory = new DirectoryInfo(@"c:\");
            		var file = directory.FindFileRecursive(f => f.Extension == ".ini");
            	</code>
            </example>
        </member>
        <member name="M:DirectoryInfoExtensions.FindFilesRecursive(System.IO.DirectoryInfo,System.String)">
            <summary>
            	Searches the provided directory recursively and returns the all files matching the provided pattern.
            </summary>
            <param name = "directory">The directory.</param>
            <param name = "pattern">The pattern.</param>
            <remarks>
            	This methods is quite perfect to be used in conjunction with the newly created FileInfo-Array extension methods.
            </remarks>
            <returns>The found files</returns>
            <example>
            	<code>
            		var directory = new DirectoryInfo(@"c:\");
            		var files = directory.FindFilesRecursive("*.ini");
            	</code>
            </example>
        </member>
        <member name="M:DirectoryInfoExtensions.FindFilesRecursive(System.IO.DirectoryInfo,System.Func{System.IO.FileInfo,System.Boolean})">
            <summary>
            	Searches the provided directory recursively and returns the all files matching to the provided predicate.
            </summary>
            <param name = "directory">The directory.</param>
            <param name = "predicate">The predicate.</param>
            <returns>The found files</returns>
            <remarks>
            	This methods is quite perfect to be used in conjunction with the newly created FileInfo-Array extension methods.
            </remarks>
            <example>
            	<code>
            		var directory = new DirectoryInfo(@"c:\");
            		var files = directory.FindFilesRecursive(f => f.Extension == ".ini");
            	</code>
            </example>
        </member>
        <member name="M:DirectoryInfoExtensions.CopyTo(System.IO.DirectoryInfo,System.String)">
            <summary>
            Copies the entire directory to another one
            </summary>
            <param name="sourceDirectory">The source directory.</param>
            <param name="targetDirectoryPath">The target directory path.</param>
            <returns></returns>
        </member>
        <member name="M:DirectoryInfoExtensions.CopyTo(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Copies the entire directory to another one
            </summary>
            <param name="sourceDirectory">The source directory.</param>
            <param name="targetDirectory">The target directory.</param>
        </member>
        <member name="T:EnumerableExtensions">
            <summary>
            	Extension methods for all kinds of (typed) enumerable data (Array, List, ...)
            </summary>
        </member>
        <member name="M:EnumerableExtensions.ConvertList``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            	Converts all items of a list and returns them as enumerable.
            </summary>
            <typeparam name = "TSource">The source data type</typeparam>
            <typeparam name = "TTarget">The target data type</typeparam>
            <param name = "source">The source data.</param>
            <returns>The converted data</returns>
            <example>
            	var values = new[] { "1", "2", "3" };
            	values.ConvertList&lt;string, int&gt;().ForEach(Console.WriteLine);
            </example>
        </member>
        <member name="M:EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            	Performs an action for each item in the enumerable
            </summary>
            <typeparam name = "T">The enumerable data type</typeparam>
            <param name = "values">The data values.</param>
            <param name = "action">The action to be performed.</param>
            <example>
            	var values = new[] { "1", "2", "3" };
            	values.ConvertList&lt;string, int&gt;().ForEach(Console.WriteLine);
            </example>
            <remarks>
            	This method was intended to return the passed values to provide method chaining. Howver due to defered execution the compiler would actually never run the entire code at all.
            </remarks>
        </member>
        <member name="M:EnumerableExtensions.IgnoreNulls``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            	Returns enumerable object based on target, which does not contains null references.
            	If target is null reference, returns empty enumerable object.
            </summary>
            <typeparam name = "T">Type of items in target.</typeparam>
            <param name = "target">Target enumerable object. Can be null.</param>
            <example>
            	object[] items = null;
            	foreach(var item in items.NotNull()){
            	// result of items.NotNull() is empty but not null enumerable
            	}
             
            	object[] items = new object[]{ null, "Hello World!", null, "Good bye!" };
            	foreach(var item in items.NotNull()){
            	// result of items.NotNull() is enumerable with two strings
            	}
            </example>
            <remarks>
            	Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
        </member>
        <member name="M:EnumerableExtensions.MaxItem``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``1@)">
            <summary>
            	Returns the maximum item based on a provided selector.
            </summary>
            <typeparam name = "TItem">The item type</typeparam>
            <typeparam name = "TValue">The value item</typeparam>
            <param name = "items">The items.</param>
            <param name = "selector">The selector.</param>
            <param name = "maxValue">The max value as output parameter.</param>
            <returns>The maximum item</returns>
            <example>
            	<code>
            		int age;
            		var oldestPerson = persons.MaxItem(p =&gt; p.Age, out age);
            	</code>
            </example>
        </member>
        <member name="M:EnumerableExtensions.MaxItem``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            	Returns the maximum item based on a provided selector.
            </summary>
            <typeparam name = "TItem">The item type</typeparam>
            <typeparam name = "TValue">The value item</typeparam>
            <param name = "items">The items.</param>
            <param name = "selector">The selector.</param>
            <returns>The maximum item</returns>
            <example>
            	<code>
            		var oldestPerson = persons.MaxItem(p =&gt; p.Age);
            	</code>
            </example>
        </member>
        <member name="M:EnumerableExtensions.MinItem``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``1@)">
            <summary>
            	Returns the minimum item based on a provided selector.
            </summary>
            <typeparam name = "TItem">The item type</typeparam>
            <typeparam name = "TValue">The value item</typeparam>
            <param name = "items">The items.</param>
            <param name = "selector">The selector.</param>
            <param name = "minValue">The min value as output parameter.</param>
            <returns>The minimum item</returns>
            <example>
            	<code>
            		int age;
            		var youngestPerson = persons.MinItem(p =&gt; p.Age, out age);
            	</code>
            </example>
        </member>
        <member name="M:EnumerableExtensions.MinItem``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            	Returns the minimum item based on a provided selector.
            </summary>
            <typeparam name = "TItem">The item type</typeparam>
            <typeparam name = "TValue">The value item</typeparam>
            <param name = "items">The items.</param>
            <param name = "selector">The selector.</param>
            <returns>The minimum item</returns>
            <example>
            	<code>
            		var youngestPerson = persons.MinItem(p =&gt; p.Age);
            	</code>
            </example>
        </member>
        <member name="M:EnumerableExtensions.Distinct``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            	Get Distinct
            </summary>
            <param name = "source"></param>
            <param name = "expression"></param>
            <typeparam name = "T"></typeparam>
            <typeparam name = "TKey"></typeparam>
            <returns></returns>
             <remarks>
             	Contributed by Michael T, http://about.me/MichaelTran
             </remarks>
        </member>
        <member name="M:EnumerableExtensions.RemoveWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Removes matching items from a sequence
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
            
            <remarks>
            	Renamed by James Curran, to match corresponding HashSet.RemoveWhere()
            	</remarks>
        </member>
        <member name="M:EnumerableExtensions.RemoveAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            	Remove item from a list
            </summary>
            <param name = "source"></param>
            <param name = "predicate"></param>
            <typeparam name = "T"></typeparam>
            <returns></returns>
             <remarks>
             	Contributed by Michael T, http://about.me/MichaelTran
             </remarks>
        </member>
        <member name="M:EnumerableExtensions.ToCSV``1(System.Collections.Generic.IEnumerable{``0},System.Char)">
            <summary>
             Turn the list of objects to a string of Common Seperated Value
            </summary>
            <param name="source"></param>
            <param name="separator"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
             <example>
             	<code>
             		var values = new[] { 1, 2, 3, 4, 5 };
            			string csv = values.ToCSV(';');
             	</code>
             </example>
             <remarks>
             	Contributed by Moses, http://mosesofegypt.net
             </remarks>
        </member>
        <member name="M:EnumerableExtensions.ToCSV``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
             Turn the list of objects to a string of Common Seperated Value
            </summary>
            <param name="source"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
             <example>
             	<code>
             		var values = new[] {1, 2, 3, 4, 5};
            			string csv = values.ToCSV();
             	</code>
             </example>
             <remarks>
             	Contributed by Moses, http://mosesofegypt.net
             </remarks>
        </member>
        <member name="M:EnumerableExtensions.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Boolean)">
            <summary>
            Overload the Select to allow null as a return
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="allowNull"></param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> using the selector containing null or non-null results based on <see cref="!:allowNull"/>.</returns>
            <example>
            <code>
            var list = new List{object}{ new object(), null, null };
            var noNulls = list.Select(x => x, false);
            </code>
            </example>
            <remarks>
            Contributed by thinktech_coder
            </remarks>
        </member>
        <member name="M:EnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns true if the <paramref name="source"/> is null or without any items.
            </summary>
        </member>
        <member name="M:EnumerableExtensions.IsNotEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns true if the <paramref name="source"/> is contains at least one item.
            </summary>
        </member>
        <member name="M:EnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the first item or the <paramref name="defaultValue"/> if the <paramref name="source"/>
            does not contain any item.
            </summary>
        </member>
        <member name="M:EnumerableExtensions.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Appends an element to the end of the current collection and returns the new collection.
            </summary>
            <typeparam name="T">The enumerable data type</typeparam>
            <param name="source">The data values.</param>
            <param name="item">The element to append the current collection with.</param>
            <returns>
                The modified collection.
            </returns>
            <example>
                var integers = Enumerable.Range(0, 3);  // 0, 1, 2
                integers = integers.Append(3);          // 0, 1, 2, 3
            </example>
        </member>
        <member name="M:EnumerableExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Prepends an element to the start of the current collection and returns the new collection.
            </summary>
            <typeparam name="T">The enumerable data type</typeparam>
            <param name="source">The data values.</param>
            <param name="item">The element to prepend the current collection with.</param>
            <returns>
                The modified collection.
            </returns>
            <example>
                var integers = Enumerable.Range(1, 3);  // 1, 2, 3
                integers = integers.Prepend(0);         // 0, 1, 2, 3
            </example>
        </member>
        <member name="M:EnumerableExtensions.ToArray``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Creates an Array from an IEnumerable&lt;T&gt; using the specified transform function.
            </summary>
            <typeparam name="TSource">The source data type</typeparam>
            <typeparam name="TResult">The target data type</typeparam>
            <param name="source">The source data.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>An Array of the target data type</returns>
            <example>
                var integers = Enumerable.Range(1, 3);
                var intStrings = values.ToArray(i => i.ToString());
            </example>
            <remarks>
                This method is a shorthand for the frequently use pattern IEnumerable&lt;T&gt;.Select(Func).ToArray()
            </remarks>
        </member>
        <member name="M:EnumerableExtensions.ToList``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Creates a List&lt;T&gt; from an IEnumerable&lt;T&gt; using the specified transform function.
            </summary>
            <typeparam name="TSource">The source data type</typeparam>
            <typeparam name="TResult">The target data type</typeparam>
            <param name="source">The source data.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>An IEnumerable&lt;T&gt; of the target data type</returns>
            <example>
                var integers = Enumerable.Range(1, 3);
                var intStrings = values.ToList(i => i.ToString());
            </example>
            <remarks>
                This method is a shorthand for the frequently use pattern IEnumerable&lt;T&gt;.Select(Func).ToList()
            </remarks>
        </member>
        <member name="M:EnumerableExtensions.Sum(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Computes the sum of a sequence of UInt32 values.
            </summary>
            <param name="source">A sequence of UInt32 values to calculate the sum of.</param>
            <returns>The sum of the values in the sequence.</returns>
        </member>
        <member name="M:EnumerableExtensions.Sum(System.Collections.Generic.IEnumerable{System.UInt64})">
            <summary>
            Computes the sum of a sequence of UInt64 values.
            </summary>
            <param name="source">A sequence of UInt64 values to calculate the sum of.</param>
            <returns>The sum of the values in the sequence.</returns>
        </member>
        <member name="M:EnumerableExtensions.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.UInt32}})">
            <summary>
            Computes the sum of a sequence of nullable UInt32 values.
            </summary>
            <param name="source">A sequence of nullable UInt32 values to calculate the sum of.</param>
            <returns>The sum of the values in the sequence.</returns>
        </member>
        <member name="M:EnumerableExtensions.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.UInt64}})">
            <summary>
            Computes the sum of a sequence of nullable UInt64 values.
            </summary>
            <param name="source">A sequence of nullable UInt64 values to calculate the sum of.</param>
            <returns>The sum of the values in the sequence.</returns>
        </member>
        <member name="M:EnumerableExtensions.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32})">
            <summary>
            Computes the sum of a sequence of UInt32 values that are obtained by invoking a transformation function on each element of the intput sequence.
            </summary>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selection">A transformation function to apply to each element.</param>
            <returns>The sum of the projected values.</returns>
        </member>
        <member name="M:EnumerableExtensions.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt32}})">
            <summary>
            Computes the sum of a sequence of nullable UInt32 values that are obtained by invoking a transformation function on each element of the intput sequence.
            </summary>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selection">A transformation function to apply to each element.</param>
            <returns>The sum of the projected values.</returns>
        </member>
        <member name="M:EnumerableExtensions.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64})">
            <summary>
            Computes the sum of a sequence of UInt64 values that are obtained by invoking a transformation function on each element of the intput sequence.
            </summary>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">A transformation function to apply to each element.</param>
            <returns>The sum of the projected values.</returns>
        </member>
        <member name="M:EnumerableExtensions.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt64}})">
            <summary>
            Computes the sum of a sequence of nullable UInt64 values that are obtained by invoking a transformation function on each element of the intput sequence.
            </summary>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">A transformation function to apply to each element.</param>
            <returns>The sum of the projected values.</returns>
        </member>
        <member name="M:EnumerableExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}})">
            <summary>
            Converts an enumeration of groupings into a Dictionary of those groupings.
            </summary>
            <typeparam name="TKey">Key type of the grouping and dictionary.</typeparam>
            <typeparam name="TValue">Element type of the grouping and dictionary list.</typeparam>
            <param name="groupings">The enumeration of groupings from a GroupBy() clause.</param>
            <returns>A dictionary of groupings such that the key of the dictionary is TKey type and the value is List of TValue type.</returns>
        </member>
        <member name="M:EnumerableExtensions.HasCountOf``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
              Returns whether the sequence contains a certain amount of elements.
            </summary>
            <typeparam name = "T">The type of the elements of the input sequence.</typeparam>
            <param name = "source">The source for this extension method.</param>
            <param name = "count">The amount of elements the sequence should contain.</param>
            <returns>True when the sequence contains the specified amount of elements, false otherwise.</returns>
        </member>
        <member name="M:EnumerableExtensions.EnumValuesToList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Allows you to create Enumerable List of the Enum's Values.
            </summary>
            <typeparam name="T">Enum Type to enumerate</typeparam>
            <returns></returns>
        </member>
        <member name="M:EnumerableExtensions.EnumNamesToList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Allows you to create a enumerable string list of the items name in the Enum.
            </summary>
            <typeparam name="T">Enum Type to enumerate</typeparam>
            <returns></returns>
        </member>
        <member name="M:EnumerableExtensions.ConcatWith``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Concatenate a list of items using the provided separator.
            </summary>
            <param name="items">An enumerable collection of items to concatenate.</param>
            <param name="separator">The separator to use for the concatenation (defaults to ",").</param>
            <param name="formatString">An optional string formatter for the items in the output list.</param>
            <returns>The enumerable collection of items concatenated into a single string.</returns>
            <example>
            	<code>
            		List&lt;double&gt; doubles = new List&lt;double&gt;() { 123.4567, 123.4, 123.0, 4, 5 };
            		string concatenated = doubles.ConcatWith(":", "0.00");  // concatenated = 123.46:123.40:123.00:4.00:5.00
            	</code>
            </example>
            <remarks>
                Contributed by Joseph Eddy, http://www.codeplex.com/site/users/view/jceddy
            </remarks>
        </member>
        <member name="T:ExceptionExtensions">
            <summary>
              Extension methods for all kinds of exceptions.
            </summary>
        </member>
        <member name="M:ExceptionExtensions.GetOriginalException(System.Exception)">
            <summary>
              Gets the original exception which is most inner exception.
            </summary>
            <param name = "exception">The exeption</param>
            <returns>The original exception</returns>
            <remarks>
              Contributed by Kenneth Scott
            </remarks>
        </member>
        <member name="M:ExceptionExtensions.Messages(System.Exception)">
            <summary>
             Gets all the error messages
            </summary>
            <param name="exception">The exception</param>
            <returns>IEnumerable of message</returns>
             <remarks>
             	Contributed by Michael T, http://about.me/MichaelTran
             </remarks>
             <note>
             The most inner exception message is first in the list, and the most outer exception message is last in the list
             </note>
        </member>
        <member name="M:ExceptionExtensions.Exceptions(System.Exception)">
            <summary>
             Gets all the errors
            </summary>
            <param name="exception">The exception</param>
            <returns>IEnumerable of message</returns>
             <remarks>
             	Contributed by Michael T, http://about.me/MichaelTran
             </remarks>
             <note>
             The most inner exception is first in the list, and the most outer exception is last in the list
             </note>
        </member>
        <member name="T:FileInfoExtensions">
            <summary>
            	Extension methods for the FileInfo and FileInfo-Array classes
            </summary>
        </member>
        <member name="M:FileInfoExtensions.Rename(System.IO.FileInfo,System.String)">
            <summary>
            	Renames a file.
            </summary>
            <param name = "file">The file.</param>
            <param name = "newName">The new name.</param>
            <returns>The renamed file</returns>
            <example>
            	<code>
            		var file = new FileInfo(@"c:\test.txt");
            		file.Rename("test2.txt");
            	</code>
            </example>
        </member>
        <member name="M:FileInfoExtensions.RenameFileWithoutExtension(System.IO.FileInfo,System.String)">
            <summary>
            	Renames a without changing its extension.
            </summary>
            <param name = "file">The file.</param>
            <param name = "newName">The new name.</param>
            <returns>The renamed file</returns>
            <example>
            	<code>
            		var file = new FileInfo(@"c:\test.txt");
            		file.RenameFileWithoutExtension("test3");
            	</code>
            </example>
        </member>
        <member name="M:FileInfoExtensions.ChangeExtension(System.IO.FileInfo,System.String)">
            <summary>
            	Changes the files extension.
            </summary>
            <param name = "file">The file.</param>
            <param name = "newExtension">The new extension.</param>
            <returns>The renamed file</returns>
            <example>
            	<code>
            		var file = new FileInfo(@"c:\test.txt");
            		file.ChangeExtension("xml");
            	</code>
            </example>
        </member>
        <member name="M:FileInfoExtensions.ChangeExtensions(System.IO.FileInfo[],System.String)">
            <summary>
            	Changes the extensions of several files at once.
            </summary>
            <param name = "files">The files.</param>
            <param name = "newExtension">The new extension.</param>
            <returns>The renamed files</returns>
            <example>
            	<code>
            		var files = directory.GetFiles("*.txt", "*.xml");
            		files.ChangeExtensions("tmp");
            	</code>
            </example>
        </member>
        <member name="M:FileInfoExtensions.Delete(System.IO.FileInfo[])">
            <summary>
            	Deletes several files at once and consolidates any exceptions.
            </summary>
            <param name = "files">The files.</param>
            <example>
            	<code>
            		var files = directory.GetFiles("*.txt", "*.xml");
            		files.Delete()
            	</code>
            </example>
        </member>
        <member name="M:FileInfoExtensions.Delete(System.IO.FileInfo[],System.Boolean)">
            <summary>
            	Deletes several files at once and optionally consolidates any exceptions.
            </summary>
            <param name = "files">The files.</param>
            <param name = "consolidateExceptions">if set to <c>true</c> exceptions are consolidated and the processing is not interrupted.</param>
            <example>
            	<code>
            		var files = directory.GetFiles("*.txt", "*.xml");
            		files.Delete()
            	</code>
            </example>
        </member>
        <member name="M:FileInfoExtensions.CopyTo(System.IO.FileInfo[],System.String)">
            <summary>
            	Copies several files to a new folder at once and consolidates any exceptions.
            </summary>
            <param name = "files">The files.</param>
            <param name = "targetPath">The target path.</param>
            <returns>The newly created file copies</returns>
            <example>
            	<code>
            		var files = directory.GetFiles("*.txt", "*.xml");
            		var copiedFiles = files.CopyTo(@"c:\temp\");
            	</code>
            </example>
        </member>
        <member name="M:FileInfoExtensions.CopyTo(System.IO.FileInfo[],System.String,System.Boolean)">
            <summary>
            	Copies several files to a new folder at once and optionally consolidates any exceptions.
            </summary>
            <param name = "files">The files.</param>
            <param name = "targetPath">The target path.</param>
            <param name = "consolidateExceptions">if set to <c>true</c> exceptions are consolidated and the processing is not interrupted.</param>
            <returns>The newly created file copies</returns>
            <example>
            	<code>
            		var files = directory.GetFiles("*.txt", "*.xml");
            		var copiedFiles = files.CopyTo(@"c:\temp\");
            	</code>
            </example>
        </member>
        <member name="M:FileInfoExtensions.MoveTo(System.IO.FileInfo[],System.String)">
            <summary>
            	Moves several files to a new folder at once and optionally consolidates any exceptions.
            </summary>
            <param name = "files">The files.</param>
            <param name = "targetPath">The target path.</param>
            <returns>The moved files</returns>
            <example>
            	<code>
            		var files = directory.GetFiles("*.txt", "*.xml");
            		files.MoveTo(@"c:\temp\");
            	</code>
            </example>
        </member>
        <member name="M:FileInfoExtensions.MoveTo(System.IO.FileInfo[],System.String,System.Boolean)">
            <summary>
            	Movies several files to a new folder at once and optionally consolidates any exceptions.
            </summary>
            <param name = "files">The files.</param>
            <param name = "targetPath">The target path.</param>
            <param name = "consolidateExceptions">if set to <c>true</c> exceptions are consolidated and the processing is not interrupted.</param>
            <returns>The moved files</returns>
            <example>
            	<code>
            		var files = directory.GetFiles("*.txt", "*.xml");
            		files.MoveTo(@"c:\temp\");
            	</code>
            </example>
        </member>
        <member name="M:FileInfoExtensions.SetAttributes(System.IO.FileInfo[],System.IO.FileAttributes)">
            <summary>
            	Sets file attributes for several files at once
            </summary>
            <param name = "files">The files.</param>
            <param name = "attributes">The attributes to be set.</param>
            <returns>The changed files</returns>
            <example>
            	<code>
            		var files = directory.GetFiles("*.txt", "*.xml");
            		files.SetAttributes(FileAttributes.Archive);
            	</code>
            </example>
        </member>
        <member name="M:FileInfoExtensions.SetAttributesAdditive(System.IO.FileInfo[],System.IO.FileAttributes)">
            <summary>
            	Appends file attributes for several files at once (additive to any existing attributes)
            </summary>
            <param name = "files">The files.</param>
            <param name = "attributes">The attributes to be set.</param>
            <returns>The changed files</returns>
            <example>
            	<code>
            		var files = directory.GetFiles("*.txt", "*.xml");
            		files.SetAttributesAdditive(FileAttributes.Archive);
            	</code>
            </example>
        </member>
        <member name="T:IConverter`1">
            <summary>
            	Generic converter interface used to allow extension methods to be applied.
            </summary>
            <typeparam name = "T"></typeparam>
        </member>
        <member name="P:IConverter`1.Value">
            <summary>
            	Gets the internal value to be converted.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:IntExtensions">
            <summary>
            	Extension methods for the integer data type
            </summary>
        </member>
        <member name="M:IntExtensions.Times(System.Int32,System.Action)">
            <summary>
            	Performs the specified action n times based on the underlying int value.
            </summary>
            <param name = "value">The value.</param>
            <param name = "action">The action.</param>
        </member>
        <member name="M:IntExtensions.Times(System.Int32,System.Action{System.Int32})">
            <summary>
            	Performs the specified action n times based on the underlying int value.
            </summary>
            <param name = "value">The value.</param>
            <param name = "action">The action.</param>
        </member>
        <member name="M:IntExtensions.IsEven(System.Int32)">
            <summary>
            	Determines whether the value is even
            </summary>
            <param name = "value">The Value</param>
            <returns>true or false</returns>
        </member>
        <member name="M:IntExtensions.IsOdd(System.Int32)">
            <summary>
            	Determines whether the value is odd
            </summary>
            <param name = "value">The Value</param>
            <returns>true or false</returns>
        </member>
        <member name="M:IntExtensions.InRange(System.Int32,System.Int32,System.Int32)">
            <summary>Checks whether the value is in range</summary>
            <param name="value">The Value</param>
            <param name="minValue">The minimum value</param>
            <param name="maxValue">The maximum value</param>
        </member>
        <member name="M:IntExtensions.InRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Checks whether the value is in range or returns the default value</summary>
            <param name="value">The Value</param>
            <param name="minValue">The minimum value</param>
            <param name="maxValue">The maximum value</param>
            <param name="defaultValue">The default value</param>
        </member>
        <member name="M:IntExtensions.IsPrime(System.Int32)">
            <summary>
            A prime number (or a prime) is a natural number that has exactly two distinct natural number divisors: 1 and itself.
            </summary>
            <param name="candidate">Object value</param>
            <returns>Returns true if the value is a prime number.</returns>
        </member>
        <member name="M:IntExtensions.ToOrdinal(System.Int32)">
            <summary>
            Converts the value to ordinal string. (English)
            </summary>
            <param name="i">Object value</param>
            <returns>Returns string containing ordinal indicator adjacent to a numeral denoting. (English)</returns>
        </member>
        <member name="M:IntExtensions.ToOrdinal(System.Int32,System.String)">
            <summary>
            Converts the value to ordinal string with specified format. (English)
            </summary>
            <param name="i">Object value</param>
            <param name="format">A standard or custom format string that is supported by the object to be formatted.</param>
            <returns>Returns string containing ordinal indicator adjacent to a numeral denoting. (English)</returns>
        </member>
        <member name="M:IntExtensions.AsLong(System.Int32)">
            <summary>
            Returns the integer as long.
            </summary>
        </member>
        <member name="M:IntExtensions.IsIndexInArray(System.Int32,System.Array)">
            <summary>
            To check whether an index is in the range of the given array.
            </summary>
            <param name="index">Index to check</param>
            <param name="arrayToCheck">Array where to check</param>
            <returns></returns>
            <remarks>
            	Contributed by Mohammad Rahman, http://mohammad-rahman.blogspot.com/
            </remarks>
        </member>
        <member name="M:IntExtensions.GetArrayIndex(System.Int32)">
            <summary>
            To get Array index from a given based on a number.
            </summary>
            <param name="at">Real world postion </param>
            <returns></returns>
            <remarks>
            	Contributed by Mohammad Rahman, http://mohammad-rahman.blogspot.com/
            	jceddy fixed typo
            </remarks>
        </member>
        <member name="M:IntExtensions.Days(System.Int32)">
            <summary>
            Gets a TimeSpan from an integer number of days.
            </summary>
            <param name="days">The number of days the TimeSpan will contain.</param>
            <returns>A TimeSpan containing the specified number of days.</returns>
            <remarks>
            	Contributed by jceddy
            </remarks>
        </member>
        <member name="M:IntExtensions.Hours(System.Int32)">
            <summary>
            Gets a TimeSpan from an integer number of hours.
            </summary>
            <param name="days">The number of hours the TimeSpan will contain.</param>
            <returns>A TimeSpan containing the specified number of hours.</returns>
            <remarks>
            	Contributed by jceddy
            </remarks>
        </member>
        <member name="M:IntExtensions.Milliseconds(System.Int32)">
            <summary>
            Gets a TimeSpan from an integer number of milliseconds.
            </summary>
            <param name="days">The number of milliseconds the TimeSpan will contain.</param>
            <returns>A TimeSpan containing the specified number of milliseconds.</returns>
            <remarks>
            	Contributed by jceddy
            </remarks>
        </member>
        <member name="M:IntExtensions.Minutes(System.Int32)">
            <summary>
            Gets a TimeSpan from an integer number of minutes.
            </summary>
            <param name="days">The number of minutes the TimeSpan will contain.</param>
            <returns>A TimeSpan containing the specified number of minutes.</returns>
            <remarks>
            	Contributed by jceddy
            </remarks>
        </member>
        <member name="M:IntExtensions.Seconds(System.Int32)">
            <summary>
            Gets a TimeSpan from an integer number of seconds.
            </summary>
            <param name="days">The number of seconds the TimeSpan will contain.</param>
            <returns>A TimeSpan containing the specified number of seconds.</returns>
            <remarks>
            	Contributed by jceddy
            </remarks>
        </member>
        <member name="M:IntExtensions.Ticks(System.Int32)">
            <summary>
            Gets a TimeSpan from an integer number of ticks.
            </summary>
            <param name="days">The number of ticks the TimeSpan will contain.</param>
            <returns>A TimeSpan containing the specified number of ticks.</returns>
            <remarks>
            	Contributed by jceddy
            </remarks>
        </member>
        <member name="T:ListExtensions">
            <summary>
            	Extension methods for all kind of Lists implementing the IList&lt;T&gt; interface
            </summary>
        </member>
        <member name="M:ListExtensions.InsertUnique``1(System.Collections.Generic.IList{``0},System.Int32,``0)">
            <summary>
            	Inserts an item uniquely to to a list and returns a value whether the item was inserted or not.
            </summary>
            <typeparam name = "T">The generic list item type.</typeparam>
            <param name = "list">The list to be inserted into.</param>
            <param name = "index">The index to insert the item at.</param>
            <param name = "item">The item to be added.</param>
            <returns>Indicates whether the item was inserted or not</returns>
        </member>
        <member name="M:ListExtensions.InsertRangeUnique``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            	Inserts a range of items uniquely to a list starting at a given index and returns the amount of items inserted.
            </summary>
            <typeparam name = "T">The generic list item type.</typeparam>
            <param name = "list">The list to be inserted into.</param>
            <param name = "startIndex">The start index.</param>
            <param name = "items">The items to be inserted.</param>
            <returns>The amount if items that were inserted.</returns>
        </member>
        <member name="M:ListExtensions.IndexOf``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            	Return the index of the first matching item or -1.
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "list">The list.</param>
            <param name = "comparison">The comparison.</param>
            <returns>The item index</returns>
        </member>
        <member name="M:ListExtensions.Join``1(System.Collections.Generic.IList{``0},System.Char)">
            <summary>
            	Join all the elements in the list and create a string seperated by the specified char.
            </summary>
            <param name = "list">
            	The list.
            </param>
            <param name = "joinChar">
            	The join char.
            </param>
            <typeparam name = "T">
            </typeparam>
            <returns>
            	The resulting string of the elements in the list.
            </returns>
            <remarks>
            	Contributed by Michael T, http://about.me/MichaelTran
            </remarks>
        </member>
        <member name="M:ListExtensions.Join``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            	Join all the elements in the list and create a string seperated by the specified string.
            </summary>
            <param name = "list">
            	The list.
            </param>
            <param name = "joinString">
            	The join string.
            </param>
            <typeparam name = "T">
            </typeparam>
            <returns>
            	The resulting string of the elements in the list.
            </returns>
            <remarks>
            	Contributed by Michael T, http://about.me/MichaelTran
            	Optimised by Mario Majcica
            </remarks>
        </member>
        <member name="M:ListExtensions.Match``1(System.Collections.Generic.IList{``0},System.String,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            	Using Relugar Expression, find the top matches for each item in the source specified by the arguments to search.
            </summary>
            <param name = "list">
            	The source.
            </param>
            <param name = "searchString">
            	The search string.
            </param>
            <param name = "top">
            	The top.
            </param>
            <param name = "args">
            	The args.
            </param>
            <typeparam name = "T">
            </typeparam>
            <returns>
            	A List of top matches.
            </returns>
            <remarks>
            	Contributed by Michael T, http://about.me/MichaelTran
            </remarks>
        </member>
        <member name="M:ListExtensions.Cast``1(System.Collections.IList)">
            <summary>
            	Cast this list into a List
            </summary>
            <param name = "source"></param>
            <typeparam name = "T"></typeparam>
            <returns></returns>
             <remarks>
             	Contributed by Michael T, http://about.me/MichaelTran
             </remarks>
        </member>
        <member name="M:ListExtensions.GetRandomItem``1(System.Collections.Generic.IList{``0},System.Random)">
            <summary>
            Get's an random item from list.
            </summary>
            <typeparam name="T">Type of list item.</typeparam>
            <param name="source">Source list.</param>
            <param name="random">Random instance to get random index.</param>
            <returns>A random item from list.</returns>
        </member>
        <member name="M:ListExtensions.GetRandomItem``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Get's an random item from list.
            </summary>
            <typeparam name="T">Type of list item.</typeparam>
            <param name="source">Source list.</param>
            <param name="seed">MSDN: A number used to calculate a starting value for the pseudo-random number 
            sequence. If a negative number is specified, the absolute value of the number is used..</param>
            <returns>A random item from list.</returns>
        </member>
        <member name="M:ListExtensions.GetRandomItem``1(System.Collections.Generic.IList{``0})">
            <summary>
            Get's an random item from list.
            </summary>
            <typeparam name="T">Type of list item.</typeparam>
            <param name="source">Source list.</param>
            <returns>A random item from list.</returns>
        </member>
        <member name="M:ListExtensions.Merge``1(System.Collections.Generic.List{``0}[])">
            <summary>The merge.</summary>
            <param name="lists">The lists.</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <remarks>
            	Contributed by Michael T, http://about.me/MichaelTran
            </remarks>
        </member>
        <member name="M:ListExtensions.Merge``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.List{``0}[])">
            <summary>The merge.</summary>
            <param name="match">The match.</param>
            <param name="lists">The lists.</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <remarks>
            	Contributed by Michael T, http://about.me/MichaelTran
            </remarks>
        </member>
        <member name="M:ListExtensions.Merge``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>The merge.</summary>
            <param name="list1">The list 1.</param>
            <param name="list2">The list 2.</param>
            <param name="match">The match.</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <remarks>
            	Contributed by Michael T, http://about.me/MichaelTran
            </remarks>
        </member>
        <member name="M:ListExtensions.Merge``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>The merge.</summary>
            <param name="list1">The list 1.</param>
            <param name="list2">The list 2.</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <remarks>
            	Contributed by Michael T, http://about.me/MichaelTran
            </remarks>
        </member>
        <member name="T:StreamExtensions">
            <summary>
            	Extension methods any kind of streams
            </summary>
        </member>
        <member name="M:StreamExtensions.GetReader(System.IO.Stream)">
            <summary>
            	Opens a StreamReader using the default encoding.
            </summary>
            <param name = "stream">The stream.</param>
            <returns>The stream reader</returns>
        </member>
        <member name="M:StreamExtensions.GetReader(System.IO.Stream,System.Text.Encoding)">
            <summary>
            	Opens a StreamReader using the specified encoding.
            </summary>
            <param name = "stream">The stream.</param>
            <param name = "encoding">The encoding.</param>
            <returns>The stream reader</returns>
        </member>
        <member name="M:StreamExtensions.GetWriter(System.IO.Stream)">
            <summary>
            	Opens a StreamWriter using the default encoding.
            </summary>
            <param name = "stream">The stream.</param>
            <returns>The stream writer</returns>
        </member>
        <member name="M:StreamExtensions.GetWriter(System.IO.Stream,System.Text.Encoding)">
            <summary>
            	Opens a StreamWriter using the specified encoding.
            </summary>
            <param name = "stream">The stream.</param>
            <param name = "encoding">The encoding.</param>
            <returns>The stream writer</returns>
        </member>
        <member name="M:StreamExtensions.ReadToEnd(System.IO.Stream)">
            <summary>
            	Reads all text from the stream using the default encoding.
            </summary>
            <param name = "stream">The stream.</param>
            <returns>The result string.</returns>
        </member>
        <member name="M:StreamExtensions.ReadToEnd(System.IO.Stream,System.Text.Encoding)">
            <summary>
            	Reads all text from the stream using a specified encoding.
            </summary>
            <param name = "stream">The stream.</param>
            <param name = "encoding">The encoding.</param>
            <returns>The result string.</returns>
        </member>
        <member name="M:StreamExtensions.SeekToBegin(System.IO.Stream)">
            <summary>
            	Sets the stream cursor to the beginning of the stream.
            </summary>
            <param name = "stream">The stream.</param>
            <returns>The stream</returns>
        </member>
        <member name="M:StreamExtensions.SeekToEnd(System.IO.Stream)">
            <summary>
            	Sets the stream cursor to the end of the stream.
            </summary>
            <param name = "stream">The stream.</param>
            <returns>The stream</returns>
        </member>
        <member name="M:StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream)">
            <summary>
            	Copies one stream into a another one.
            </summary>
            <param name = "stream">The source stream.</param>
            <param name = "targetStream">The target stream.</param>
            <returns>The source stream.</returns>
        </member>
        <member name="M:StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            	Copies one stream into a another one.
            </summary>
            <param name = "stream">The source stream.</param>
            <param name = "targetStream">The target stream.</param>
            <param name = "bufferSize">The buffer size used to read / write.</param>
            <returns>The source stream.</returns>
        </member>
        <member name="M:StreamExtensions.CopyToMemory(System.IO.Stream)">
            <summary>
            	Copies any stream into a local MemoryStream
            </summary>
            <param name = "stream">The source stream.</param>
            <returns>The copied memory stream.</returns>
        </member>
        <member name="M:StreamExtensions.ReadAllBytes(System.IO.Stream)">
            <summary>
            	Reads the entire stream and returns a byte array.
            </summary>
            <param name = "stream">The stream.</param>
            <returns>The byte array</returns>
            <remarks>
            	Thanks to EsbenCarlsen  for providing an update to this method.
            </remarks>
        </member>
        <member name="M:StreamExtensions.ReadFixedBuffersize(System.IO.Stream,System.Int32)">
            <summary>
            	Reads a fixed number of bytes.
            </summary>
            <param name = "stream">The stream to read from</param>
            <param name = "bufsize">The number of bytes to read.</param>
            <returns>the read byte[]</returns>
        </member>
        <member name="M:StreamExtensions.Write(System.IO.Stream,System.Byte[])">
            <summary>
            	Writes all passed bytes to the specified stream.
            </summary>
            <param name = "stream">The stream.</param>
            <param name = "bytes">The byte array / buffer.</param>
        </member>
        <member name="T:StringArrayExtensions">
            <summary>
            	Extension methods for string[]
            </summary>
        </member>
        <member name="M:StringArrayExtensions.ToString(System.String[],System.String,System.String,System.String,System.String)">
            <summary>
            	Returns a combined value of strings from a string array
            </summary>
            <param name = "values">The values.</param>
            <param name = "prefix">The prefix.</param>
            <param name = "suffix">The suffix.</param>
            <param name = "quotation">The quotation (or null).</param>
            <param name = "separator">The separator.</param>
            <returns>
            	A <see cref = "T:System.String" /> that represents this instance.
            </returns>
            <remarks>
            	Contributed by blaumeister, http://www.codeplex.com/site/users/view/blaumeiser
            </remarks>
        </member>
        <member name="T:StringConverter">
            <summary>
            	Universal conversion and parsing methods for strings.
            	These methods are avaiblable throught the generic object.ConvertTo method:
            	Feel free to provide additional converns for string or any other object type.
            </summary>
            <example>
            	<code>
            		var value = "123";
            		var numeric = value.ConvertTo().ToInt32();
            	</code>
            </example>
        </member>
        <member name="M:StringConverter.ToInt32(IConverter{System.String})">
            <summary>
            	Converts a string to an Int32 value
            </summary>
            <param name = "value">The value.</param>
            <returns></returns>
            <example>
            	<code>
            		var value = "123";
            		var numeric = value.ConvertTo().ToInt32();
            	</code>
            </example>
        </member>
        <member name="M:StringConverter.ToInt32(IConverter{System.String},System.Int32,System.Boolean)">
            <summary>
            	Converts a string to an Int32 value
            </summary>
            <param name = "value">The value.</param>
            <param name = "defaultValue">The default value.</param>
            <param name = "ignoreException">if set to <c>true</c> any parsing exception will be ignored.</param>
            <returns></returns>
            <example>
            	<code>
            		var value = "123";
            		var numeric = value.ConvertTo().ToInt32();
            	</code>
            </example>
        </member>
        <member name="M:StringConverter.ToSecureString(System.String,System.Boolean)">
            <summary>
                Converts a regular string into SecureString
            </summary>
            <param name="u">String value.</param>
            <param name="makeReadOnly">Makes the text value of this secure string read-only.</param>
            <returns>Returns a SecureString containing the value of a transformed object. </returns>
        </member>
        <member name="M:StringConverter.ToUnsecureString(System.Security.SecureString)">
            <summary>
                Coverts the SecureString to a regular string.
            </summary>
            <param name="s">Object value.</param>
            <returns>Content of secured string.</returns>
        </member>
        <member name="T:StringExtensions">
            <summary>
            	Extension methods for the string data type
            </summary>
        </member>
        <member name="M:StringExtensions.IsEmpty(System.String)">
            <summary>
            	Determines whether the specified string is null or empty.
            </summary>
            <param name = "value">The string value to check.</param>
        </member>
        <member name="M:StringExtensions.IsNotEmpty(System.String)">
            <summary>
            	Determines whether the specified string is not null or empty.
            </summary>
            <param name = "value">The string value to check.</param>
        </member>
        <member name="M:StringExtensions.IfEmpty(System.String,System.String)">
            <summary>
            	Checks whether the string is empty and returns a default value in case.
            </summary>
            <param name = "value">The string to check.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>Either the string or the default value.</returns>
        </member>
        <member name="M:StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            	Formats the value with the parameters using string.Format.
            </summary>
            <param name = "value">The input string.</param>
            <param name = "parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:StringExtensions.TrimToMaxLength(System.String,System.Int32)">
            <summary>
            	Trims the text to a provided maximum length.
            </summary>
            <param name = "value">The input string.</param>
            <param name = "maxLength">Maximum length.</param>
            <returns></returns>
            <remarks>
            	Proposed by Rene Schulte
            </remarks>
        </member>
        <member name="M:StringExtensions.TrimToMaxLength(System.String,System.Int32,System.String)">
            <summary>
            	Trims the text to a provided maximum length and adds a suffix if required.
            </summary>
            <param name = "value">The input string.</param>
            <param name = "maxLength">Maximum length.</param>
            <param name = "suffix">The suffix.</param>
            <returns></returns>
            <remarks>
            	Proposed by Rene Schulte
            </remarks>
        </member>
        <member name="M:StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            	Determines whether the comparison value strig is contained within the input value string
            </summary>
            <param name = "inputValue">The input value.</param>
            <param name = "comparisonValue">The comparison value.</param>
            <param name = "comparisonType">Type of the comparison to allow case sensitive or insensitive comparison.</param>
            <returns>
            	<c>true</c> if input value contains the specified value, otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:StringExtensions.ContainsEquivalenceTo(System.String,System.String)">
            <summary>
            	Determines whether the comparison value string is contained within the input value string without any
                consideration about the case (<see cref="F:System.StringComparison.InvariantCultureIgnoreCase"/>).
            </summary>
            <param name = "inputValue">The input value.</param>
            <param name = "comparisonValue">The comparison value.  Case insensitive</param>
            <returns>
            	<c>true</c> if input value contains the specified value (case insensitive), otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:StringExtensions.PadBoth(System.String,System.Int32,System.Char,System.Boolean)">
            <summary>
            Centers a charters in this string, padding in both, left and right, by specified Unicode character,
            for a specified total lenght.
            </summary>
            <param name="value">Instance value.</param>
            <param name="width">The number of characters in the resulting string, 
            equal to the number of original characters plus any additional padding characters.
            </param>
            <param name="padChar">A Unicode padding character.</param>
            <param name="truncate">Should get only the substring of specified width if string width is 
            more than the specified width.</param>
            <returns>A new string that is equivalent to this instance, 
            but center-aligned with as many paddingChar characters as needed to create a 
            length of width paramether.</returns>
        </member>
        <member name="M:StringExtensions.ToXDocument(System.String)">
            <summary>
            	Loads the string into a LINQ to XML XDocument
            </summary>
            <param name = "xml">The XML string.</param>
            <returns>The XML document object model (XDocument)</returns>
        </member>
        <member name="M:StringExtensions.ToXmlDOM(System.String)">
            <summary>
            	Loads the string into a XML DOM object (XmlDocument)
            </summary>
            <param name = "xml">The XML string.</param>
            <returns>The XML document object model (XmlDocument)</returns>
        </member>
        <member name="M:StringExtensions.ToXPath(System.String)">
            <summary>
            	Loads the string into a XML XPath DOM (XPathDocument)
            </summary>
            <param name = "xml">The XML string.</param>
            <returns>The XML XPath document object model (XPathNavigator)</returns>
        </member>
        <member name="M:StringExtensions.ToXElement(System.String)">
            <summary>
                Loads the string into a LINQ to XML XElement
            </summary>
            <param name = "xml">The XML string.</param>
            <returns>The XML element object model (XElement)</returns>
        </member>
        <member name="M:StringExtensions.Reverse(System.String)">
            <summary>
            	Reverses / mirrors a string.
            </summary>
            <param name = "value">The string to be reversed.</param>
            <returns>The reversed string</returns>
        </member>
        <member name="M:StringExtensions.EnsureStartsWith(System.String,System.String)">
            <summary>
            	Ensures that a string starts with a given prefix.
            </summary>
            <param name = "value">The string value to check.</param>
            <param name = "prefix">The prefix value to check for.</param>
            <returns>The string value including the prefix</returns>
            <example>
            	<code>
            		var extension = "txt";
            		var fileName = string.Concat(file.Name, extension.EnsureStartsWith("."));
            	</code>
            </example>
        </member>
        <member name="M:StringExtensions.EnsureEndsWith(System.String,System.String)">
            <summary>
            	Ensures that a string ends with a given suffix.
            </summary>
            <param name = "value">The string value to check.</param>
            <param name = "suffix">The suffix value to check for.</param>
            <returns>The string value including the suffix</returns>
            <example>
            	<code>
            		var url = "http://www.pgk.de";
            		url = url.EnsureEndsWith("/"));
            	</code>
            </example>
        </member>
        <member name="M:StringExtensions.Repeat(System.String,System.Int32)">
            <summary>
            	Repeats the specified string value as provided by the repeat count.
            </summary>
            <param name = "value">The original string.</param>
            <param name = "repeatCount">The repeat count.</param>
            <returns>The repeated string</returns>
        </member>
        <member name="M:StringExtensions.IsNumeric(System.String)">
            <summary>
            	Tests whether the contents of a string is a numeric value
            </summary>
            <param name = "value">String to check</param>
            <returns>
            	Boolean indicating whether or not the string contents are numeric
            </returns>
            <remarks>
            	Contributed by Kenneth Scott
            </remarks>
        </member>
        <member name="M:StringExtensions.ExtractDigits(System.String)">
            <summary>
            	Extracts all digits from a string.
            </summary>
            <param name = "value">String containing digits to extract</param>
            <returns>
            	All digits contained within the input string
            </returns>
            <remarks>
            	Contributed by Kenneth Scott
            </remarks>
        </member>
        <member name="M:StringExtensions.ConcatWith(System.String,System.String[])">
            <summary>
            	Concatenates the specified string value with the passed additional strings.
            </summary>
            <param name = "value">The original value.</param>
            <param name = "values">The additional string values to be concatenated.</param>
            <returns>The concatenated string.</returns>
        </member>
        <member name="M:StringExtensions.ToGuid(System.String)">
            <summary>
            	Convert the provided string to a Guid value.
            </summary>
            <param name = "value">The original string value.</param>
            <returns>The Guid</returns>
        </member>
        <member name="M:StringExtensions.ToGuidSave(System.String)">
            <summary>
            	Convert the provided string to a Guid value and returns Guid.Empty if conversion fails.
            </summary>
            <param name = "value">The original string value.</param>
            <returns>The Guid</returns>
        </member>
        <member name="M:StringExtensions.ToGuidSave(System.String,System.Guid)">
            <summary>
            	Convert the provided string to a Guid value and returns the provided default value if the conversion fails.
            </summary>
            <param name = "value">The original string value.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The Guid</returns>
        </member>
        <member name="M:StringExtensions.GetBefore(System.String,System.String)">
            <summary>
            	Gets the string before the given string parameter.
            </summary>
            <param name = "value">The default value.</param>
            <param name = "x">The given string parameter.</param>
            <returns></returns>
            <remarks>Unlike GetBetween and GetAfter, this does not Trim the result.</remarks>
        </member>
        <member name="M:StringExtensions.GetBetween(System.String,System.String,System.String)">
            <summary>
            	Gets the string between the given string parameters.
            </summary>
            <param name = "value">The source value.</param>
            <param name = "x">The left string sentinel.</param>
            <param name = "y">The right string sentinel</param>
            <returns></returns>
            <remarks>Unlike GetBefore, this method trims the result</remarks>
        </member>
        <member name="M:StringExtensions.GetAfter(System.String,System.String)">
            <summary>
            	Gets the string after the given string parameter.
            </summary>
            <param name = "value">The default value.</param>
            <param name = "x">The given string parameter.</param>
            <returns></returns>
            <remarks>Unlike GetBefore, this method trims the result</remarks>
        </member>
        <member name="M:StringExtensions.Join``1(System.String,``0[])">
            <summary>
            	A generic version of System.String.Join()
            </summary>
            <typeparam name = "T">
            	The type of the array to join
            </typeparam>
            <param name = "separator">
            	The separator to appear between each element
            </param>
            <param name = "value">
            	An array of values
            </param>
            <returns>
            	The join.
            </returns>
            <remarks>
            	Contributed by Michael T, http://about.me/MichaelTran
            </remarks>
        </member>
        <member name="M:StringExtensions.Remove(System.String,System.Char[])">
            <summary>
            	Remove any instance of the given character from the current string.
            </summary>
            <param name = "value">
            	The input.
            </param>
            <param name = "removeCharc">
            	The remove char.
            </param>
            <remarks>
            	Contributed by Michael T, http://about.me/MichaelTran
            </remarks>
        </member>
        <member name="M:StringExtensions.Remove(System.String,System.String[])">
            <summary>
            Remove any instance of the given string pattern from the current string.
            </summary>
            <param name="value">The input.</param>
            <param name="strings">The strings.</param>
            <returns></returns>
            <remarks>
            Contributed by Michael T, http://about.me/MichaelTran
            </remarks>
        </member>
        <member name="M:StringExtensions.IsEmptyOrWhiteSpace(System.String)">
            <summary>Finds out if the specified string contains null, empty or consists only of white-space characters</summary>
            <param name = "value">The input string</param>
        </member>
        <member name="M:StringExtensions.IsNotEmptyOrWhiteSpace(System.String)">
            <summary>Determines whether the specified string is not null, empty or consists only of white-space characters</summary>
            <param name = "value">The string value to check</param>
        </member>
        <member name="M:StringExtensions.IfEmptyOrWhiteSpace(System.String,System.String)">
            <summary>Checks whether the string is null, empty or consists only of white-space characters and returns a default value in case</summary>
            <param name = "value">The string to check</param>
            <param name = "defaultValue">The default value</param>
            <returns>Either the string or the default value</returns>
        </member>
        <member name="M:StringExtensions.ToUpperFirstLetter(System.String)">
            <summary>Uppercase First Letter</summary>
            <param name = "value">The string value to process</param>
        </member>
        <member name="M:StringExtensions.Left(System.String,System.Int32)">
            <summary>
            Returns the left part of the string.
            </summary>
            <param name="value">The original string.</param>
            <param name="characterCount">The character count to be returned.</param>
            <returns>The left part</returns>
        </member>
        <member name="M:StringExtensions.Right(System.String,System.Int32)">
            <summary>
            Returns the Right part of the string.
            </summary>
            <param name="value">The original string.</param>
            <param name="characterCount">The character count to be returned.</param>
            <returns>The right part</returns>
        </member>
        <member name="M:StringExtensions.SubstringFrom(System.String,System.Int32)">
            <summary>Returns the right part of the string from index.</summary>
            <param name="value">The original value.</param>
            <param name="index">The start index for substringing.</param>
            <returns>The right part.</returns>
        </member>
        <member name="M:StringExtensions.ToTitleCase(System.String)">
            <summary>Convert text's case to a title case</summary>
            <remarks>UppperCase characters is the source string after the first of each word are lowered, unless the word is exactly 2 characters</remarks>
        </member>
        <member name="M:StringExtensions.ToTitleCase(System.String,System.Globalization.CultureInfo)">
            <summary>Convert text's case to a title case</summary>
            <remarks>UppperCase characters is the source string after the first of each word are lowered, unless the word is exactly 2 characters</remarks>
        </member>
        <member name="M:StringExtensions.ToHtmlSafe(System.String)">
            <summary>
            Makes the current instance HTML safe.
            </summary>
            <param name="s">The current instance.</param>
            <returns>An HTML safe string.</returns>
        </member>
        <member name="M:StringExtensions.ToHtmlSafe(System.String,System.Boolean)">
            <summary>
            Makes the current instance HTML safe.
            </summary>
            <param name="s">The current instance.</param>
            <param name="all">Whether to make all characters entities or just those needed.</param>
            <returns>An HTML safe string.</returns>
        </member>
        <member name="M:StringExtensions.ToHtmlSafe(System.String,System.Boolean,System.Boolean)">
            <summary>
            Makes the current instance HTML safe.
            </summary>
            <param name="s">The current instance.</param>
            <param name="all">Whether to make all characters entities or just those needed.</param>
            <param name="replace">Whether or not to encode spaces and line breaks.</param>
            <returns>An HTML safe string.</returns>
        </member>
        <member name="M:StringExtensions.EquivalentTo(System.String,System.String)">
            <summary>
            Returns true if strings are equals, without consideration to case (<see cref="F:System.StringComparison.InvariantCultureIgnoreCase"/>)
            </summary>
        </member>
        <member name="M:StringExtensions.ReplaceAll(System.String,System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,System.String})">
            <summary>
            Replace all values in string
            </summary>
            <param name="value">The input string.</param>
            <param name="oldValues">List of old values, which must be replaced</param>
            <param name="replacePredicate">Function for replacement old values</param>
            <returns>Returns new string with the replaced values</returns>
            <example>
            	<code>
                    var str = "White Red Blue Green Yellow Black Gray";
                    var achromaticColors = new[] {"White", "Black", "Gray"};
                    str = str.ReplaceAll(achromaticColors, v => "[" + v + "]");
                    // str == "[White] Red Blue Green Yellow [Black] [Gray]"
            	</code>
            </example>
            <remarks>
            	Contributed by nagits, http://about.me/AlekseyNagovitsyn
            </remarks>
        </member>
        <member name="M:StringExtensions.ReplaceAll(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Replace all values in string
            </summary>
            <param name="value">The input string.</param>
            <param name="oldValues">List of old values, which must be replaced</param>
            <param name="newValue">New value for all old values</param>
            <returns>Returns new string with the replaced values</returns>
            <example>
            	<code>
                    var str = "White Red Blue Green Yellow Black Gray";
                    var achromaticColors = new[] {"White", "Black", "Gray"};
                    str = str.ReplaceAll(achromaticColors, "[AchromaticColor]");
                    // str == "[AchromaticColor] Red Blue Green Yellow [AchromaticColor] [AchromaticColor]"
            	</code>
            </example>
            <remarks>
            	Contributed by nagits, http://about.me/AlekseyNagovitsyn
            </remarks>
        </member>
        <member name="M:StringExtensions.ReplaceAll(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Replace all values in string
            </summary>
            <param name="value">The input string.</param>
            <param name="oldValues">List of old values, which must be replaced</param>
            <param name="newValues">List of new values</param>
            <returns>Returns new string with the replaced values</returns>
            <example>
            	<code>
                    var str = "White Red Blue Green Yellow Black Gray";
                    var achromaticColors = new[] {"White", "Black", "Gray"};
                    var exquisiteColors = new[] {"FloralWhite", "Bistre", "DavyGrey"};
                    str = str.ReplaceAll(achromaticColors, exquisiteColors);
                    // str == "FloralWhite Red Blue Green Yellow Bistre DavyGrey"
            	</code>
            </example>
            <remarks>
            	Contributed by nagits, http://about.me/AlekseyNagovitsyn
            </remarks> 
        </member>
        <member name="M:StringExtensions.IsMatchingTo(System.String,System.String)">
            <summary>
            	Uses regular expressions to determine if the string matches to a given regex pattern.
            </summary>
            <param name = "value">The input string.</param>
            <param name = "regexPattern">The regular expression pattern.</param>
            <returns>
            	<c>true</c> if the value is matching to the specified pattern; otherwise, <c>false</c>.
            </returns>
            <example>
            	<code>
            		var s = "12345";
            		var isMatching = s.IsMatchingTo(@"^\d+$");
            	</code>
            </example>
        </member>
        <member name="M:StringExtensions.IsMatchingTo(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            	Uses regular expressions to determine if the string matches to a given regex pattern.
            </summary>
            <param name = "value">The input string.</param>
            <param name = "regexPattern">The regular expression pattern.</param>
            <param name = "options">The regular expression options.</param>
            <returns>
            	<c>true</c> if the value is matching to the specified pattern; otherwise, <c>false</c>.
            </returns>
            <example>
            	<code>
            		var s = "12345";
            		var isMatching = s.IsMatchingTo(@"^\d+$");
            	</code>
            </example>
        </member>
        <member name="M:StringExtensions.ReplaceWith(System.String,System.String,System.String)">
            <summary>
            	Uses regular expressions to replace parts of a string.
            </summary>
            <param name = "value">The input string.</param>
            <param name = "regexPattern">The regular expression pattern.</param>
            <param name = "replaceValue">The replacement value.</param>
            <returns>The newly created string</returns>
            <example>
            	<code>
            		var s = "12345";
            		var replaced = s.ReplaceWith(@"\d", m => string.Concat(" -", m.Value, "- "));
            	</code>
            </example>
        </member>
        <member name="M:StringExtensions.ReplaceWith(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            	Uses regular expressions to replace parts of a string.
            </summary>
            <param name = "value">The input string.</param>
            <param name = "regexPattern">The regular expression pattern.</param>
            <param name = "replaceValue">The replacement value.</param>
            <param name = "options">The regular expression options.</param>
            <returns>The newly created string</returns>
            <example>
            	<code>
            		var s = "12345";
            		var replaced = s.ReplaceWith(@"\d", m => string.Concat(" -", m.Value, "- "));
            	</code>
            </example>
        </member>
        <member name="M:StringExtensions.ReplaceWith(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
            <summary>
            	Uses regular expressions to replace parts of a string.
            </summary>
            <param name = "value">The input string.</param>
            <param name = "regexPattern">The regular expression pattern.</param>
            <param name = "evaluator">The replacement method / lambda expression.</param>
            <returns>The newly created string</returns>
            <example>
            	<code>
            		var s = "12345";
            		var replaced = s.ReplaceWith(@"\d", m => string.Concat(" -", m.Value, "- "));
            	</code>
            </example>
        </member>
        <member name="M:StringExtensions.ReplaceWith(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.Text.RegularExpressions.MatchEvaluator)">
            <summary>
            	Uses regular expressions to replace parts of a string.
            </summary>
            <param name = "value">The input string.</param>
            <param name = "regexPattern">The regular expression pattern.</param>
            <param name = "options">The regular expression options.</param>
            <param name = "evaluator">The replacement method / lambda expression.</param>
            <returns>The newly created string</returns>
            <example>
            	<code>
            		var s = "12345";
            		var replaced = s.ReplaceWith(@"\d", m => string.Concat(" -", m.Value, "- "));
            	</code>
            </example>
        </member>
        <member name="M:StringExtensions.GetMatches(System.String,System.String)">
            <summary>
            	Uses regular expressions to determine all matches of a given regex pattern.
            </summary>
            <param name = "value">The input string.</param>
            <param name = "regexPattern">The regular expression pattern.</param>
            <returns>A collection of all matches</returns>
        </member>
        <member name="M:StringExtensions.GetMatches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            	Uses regular expressions to determine all matches of a given regex pattern.
            </summary>
            <param name = "value">The input string.</param>
            <param name = "regexPattern">The regular expression pattern.</param>
            <param name = "options">The regular expression options.</param>
            <returns>A collection of all matches</returns>
        </member>
        <member name="M:StringExtensions.GetMatchingValues(System.String,System.String)">
            <summary>
            	Uses regular expressions to determine all matches of a given regex pattern and returns them as string enumeration.
            </summary>
            <param name = "value">The input string.</param>
            <param name = "regexPattern">The regular expression pattern.</param>
            <returns>An enumeration of matching strings</returns>
            <example>
            	<code>
            		var s = "12345";
            		foreach(var number in s.GetMatchingValues(@"\d")) {
            		Console.WriteLine(number);
            		}
            	</code>
            </example>
        </member>
        <member name="M:StringExtensions.GetMatchingValues(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            	Uses regular expressions to determine all matches of a given regex pattern and returns them as string enumeration.
            </summary>
            <param name = "value">The input string.</param>
            <param name = "regexPattern">The regular expression pattern.</param>
            <param name = "options">The regular expression options.</param>
            <returns>An enumeration of matching strings</returns>
            <example>
            	<code>
            		var s = "12345";
            		foreach(var number in s.GetMatchingValues(@"\d")) {
            		Console.WriteLine(number);
            		}
            	</code>
            </example>
        </member>
        <member name="M:StringExtensions.Split(System.String,System.String)">
            <summary>
            	Uses regular expressions to split a string into parts.
            </summary>
            <param name = "value">The input string.</param>
            <param name = "regexPattern">The regular expression pattern.</param>
            <returns>The splitted string array</returns>
        </member>
        <member name="M:StringExtensions.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            	Uses regular expressions to split a string into parts.
            </summary>
            <param name = "value">The input string.</param>
            <param name = "regexPattern">The regular expression pattern.</param>
            <param name = "options">The regular expression options.</param>
            <returns>The splitted string array</returns>
        </member>
        <member name="M:StringExtensions.GetWords(System.String)">
            <summary>
            	Splits the given string into words and returns a string array.
            </summary>
            <param name = "value">The input string.</param>
            <returns>The splitted string array</returns>
        </member>
        <member name="M:StringExtensions.GetWordByIndex(System.String,System.Int32)">
            <summary>
            	Gets the nth "word" of a given string, where "words" are substrings separated by a given separator
            </summary>
            <param name = "value">The string from which the word should be retrieved.</param>
            <param name = "index">Index of the word (0-based).</param>
            <returns>
            	The word at position n of the string.
            	Trying to retrieve a word at a position lower than 0 or at a position where no word exists results in an exception.
            </returns>
            <remarks>
            	Originally contributed by MMathews
            </remarks>
        </member>
        <member name="M:StringExtensions.AdjustInput(System.String)">
            <summary>
            Removed all special characters from the string.
            </summary>
            <param name="value">The input string.</param>
            <returns>The adjusted string.</returns>
        </member>
        <member name="M:StringExtensions.RemoveAllSpecialCharacters(System.String)">
            <summary>
            Removed all special characters from the string.
            </summary>
            <param name="value">The input string.</param>
            <returns>The adjusted string.</returns>
            <remarks>
            	Contributed by Michael T, http://about.me/MichaelTran, James C, http://www.noveltheory.com
            	This implementation is roughly equal to the original in speed, and should be more robust, internationally.
            </remarks>
        </member>
        <member name="M:StringExtensions.SpaceOnUpper(System.String)">
            <summary>
            Add space on every upper character
            </summary>
            <param name="value">The input string.</param>
            <returns>The adjusted string.</returns>
            <remarks>
            	Contributed by Michael T, http://about.me/MichaelTran
            </remarks>
        </member>
        <member name="T:StringExtensions.ComparsionTemplateOptions">
            <summary>
            Options to match the template with the original string
            </summary>
        </member>
        <member name="F:StringExtensions.ComparsionTemplateOptions.Default">
            <summary>
            Free template comparsion
            </summary>
        </member>
        <member name="F:StringExtensions.ComparsionTemplateOptions.FromStart">
            <summary>
            Template compared from beginning of input string
            </summary>
        </member>
        <member name="F:StringExtensions.ComparsionTemplateOptions.AtTheEnd">
            <summary>
            Template compared with the end of input string
            </summary>
        </member>
        <member name="F:StringExtensions.ComparsionTemplateOptions.Whole">
            <summary>
            Template compared whole with input string
            </summary>
        </member>
        <member name="M:StringExtensions.ExtractArguments(System.String,System.String,StringExtensions.ComparsionTemplateOptions,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Extract arguments from string by template
            </summary>
            <param name="value">The input string. For example, "My name is Aleksey".</param>
            <param name="template">Template with arguments in the format {№}. For example, "My name is {0} {1}.".</param>
            <param name="compareTemplateOptions">Template options for compare with input string.</param>
            <param name="regexOptions">Regex options.</param>
            <returns>Returns parsed arguments.</returns>
            <example>
            	<code>
            		var str = "My name is Aleksey Nagovitsyn. I'm from Russia.";
            		var args = str.ExtractArguments(@"My name is {1} {0}. I'm from {2}.");
                    // args[i] is [Nagovitsyn, Aleksey, Russia]
            	</code>
            </example>
            <remarks>
            	Contributed by nagits, http://about.me/AlekseyNagovitsyn
            </remarks>
        </member>
        <member name="M:StringExtensions.ExtractGroupArguments(System.String,System.String,StringExtensions.ComparsionTemplateOptions,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Extract arguments as regex groups from string by template
            </summary>
            <param name="value">The input string. For example, "My name is Aleksey".</param>
            <param name="template">Template with arguments in the format {№}. For example, "My name is {0} {1}.".</param>
            <param name="compareTemplateOptions">Template options for compare with input string.</param>
            <param name="regexOptions">Regex options.</param>
            <returns>Returns parsed arguments as regex groups.</returns>
            <example>
            	<code>
            		var str = "My name is Aleksey Nagovitsyn. I'm from Russia.";
            		var groupArgs = str.ExtractGroupArguments(@"My name is {1} {0}. I'm from {2}.");
                    // groupArgs[i].Value is [Nagovitsyn, Aleksey, Russia]
            	</code>
            </example>
            <remarks>
            	Contributed by nagits, http://about.me/AlekseyNagovitsyn
            </remarks>
        </member>
        <member name="M:StringExtensions.ToBytes(System.String)">
            <summary>
            	Converts the string to a byte-array using the default encoding
            </summary>
            <param name = "value">The input string.</param>
            <returns>The created byte array</returns>
        </member>
        <member name="M:StringExtensions.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            	Converts the string to a byte-array using the supplied encoding
            </summary>
            <param name = "value">The input string.</param>
            <param name = "encoding">The encoding to be used.</param>
            <returns>The created byte array</returns>
            <example>
            	<code>
            		var value = "Hello World";
            		var ansiBytes = value.ToBytes(Encoding.GetEncoding(1252)); // 1252 = ANSI
            		var utf8Bytes = value.ToBytes(Encoding.UTF8);
            	</code>
            </example>
        </member>
        <member name="M:StringExtensions.EncodeBase64(System.String)">
            <summary>
            	Encodes the input value to a Base64 string using the default encoding.
            </summary>
            <param name = "value">The input value.</param>
            <returns>The Base 64 encoded string</returns>
        </member>
        <member name="M:StringExtensions.EncodeBase64(System.String,System.Text.Encoding)">
            <summary>
            	Encodes the input value to a Base64 string using the supplied encoding.
            </summary>
            <param name = "value">The input value.</param>
            <param name = "encoding">The encoding.</param>
            <returns>The Base 64 encoded string</returns>
        </member>
        <member name="M:StringExtensions.DecodeBase64(System.String)">
            <summary>
            	Decodes a Base 64 encoded value to a string using the default encoding.
            </summary>
            <param name = "encodedValue">The Base 64 encoded value.</param>
            <returns>The decoded string</returns>
        </member>
        <member name="M:StringExtensions.DecodeBase64(System.String,System.Text.Encoding)">
            <summary>
            	Decodes a Base 64 encoded value to a string using the supplied encoding.
            </summary>
            <param name = "encodedValue">The Base 64 encoded value.</param>
            <param name = "encoding">The encoding.</param>
            <returns>The decoded string</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:StringExtensions.ParseStringToEnum``1(System.String,System.Boolean)" -->
        <member name="M:StringExtensions.IsItemInEnum``1(System.String)">
            <summary>
                To check whether the data is defined in the given enum.
            </summary>
            <typeparam name="TEnum">The enum will use to check, the data defined.</typeparam>
            <param name="dataToCheck">To match against enum.</param>
            <returns>Anonoymous method for the condition.</returns>
            <remarks>
            	Contributed by Mohammad Rahman, http://mohammad-rahman.blogspot.com/
            </remarks>
        </member>
        <member name="M:StringExtensions.RemoveLeft(System.String,System.Int32)">
            <summary>
            Return the string with the leftmost number_of_characters characters removed.
            </summary>
            <param name="str">The string being extended</param>
            <param name="number_of_characters">The number of characters to remove.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:StringExtensions.RemoveRight(System.String,System.Int32)">
            <summary>
            Return the string with the rightmost number_of_characters characters removed.
            </summary>
            <param name="str">The string being extended</param>
            <param name="number_of_characters">The number of characters to remove.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:StringExtensions.EncryptToByteArray(System.String,System.String)">
            <summary>
            Encrypt this string into a byte array.
            </summary>
            <param name="plain_text">The string being extended and that will be encrypted.</param>
            <param name="password">The password to use then encrypting the string.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:StringExtensions.DecryptFromByteArray(System.Byte[],System.String)">
            <summary>
            Decrypt the encryption stored in this byte array.
            </summary>
            <param name="encrypted_bytes">The byte array to decrypt.</param>
            <param name="password">The password to use when decrypting.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:StringExtensions.EncryptToString(System.String,System.String)">
            <summary>
            Encrypt this string and return the result as a string of hexadecimal characters.
            </summary>
            <param name="plain_text">The string being extended and that will be encrypted.</param>
            <param name="password">The password to use then encrypting the string.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:StringExtensions.DecryptFromString(System.String,System.String)">
            <summary>
            Decrypt the encryption stored in this string of hexadecimal values.
            </summary>
            <param name="encrypted_bytes_string">The hexadecimal string to decrypt.</param>
            <param name="password">The password to use then encrypting the string.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:StringExtensions.CryptBytes(System.String,System.Byte[],System.Boolean)">
            <summary>
            Encrypt or decrypt a byte array using the TripleDESCryptoServiceProvider crypto provider and Rfc2898DeriveBytes to build the key and initialization vector.
            </summary>
            <param name="password">The password string to use in encrypting or decrypting.</param>
            <param name="in_bytes">The array of bytes to encrypt.</param>
            <param name="encrypt">True to encrypt, False to decrypt.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:StringExtensions.MakeKeyAndIV(System.String,System.Byte[],System.Int32,System.Int32,System.Byte[]@,System.Byte[]@)">
            <summary>
            Use the password to generate key bytes and an initialization vector with Rfc2898DeriveBytes.
            </summary>
            <param name="password">The input password to use in generating the bytes.</param>
            <param name="salt">The input salt bytes to use in generating the bytes.</param>
            <param name="key_size_bits">The input size of the key to generate.</param>
            <param name="block_size_bits">The input block size used by the crypto provider.</param>
            <param name="key">The output key bytes to generate.</param>
            <param name="iv">The output initialization vector to generate.</param>
            <remarks></remarks>
        </member>
        <member name="M:StringExtensions.BytesToHexString(System.Byte[])">
            <summary>
            Convert a byte array into a hexadecimal string representation.
            </summary>
            <param name="bytes"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:StringExtensions.HexStringToBytes(System.String)">
            <summary>
            Convert this string containing hexadecimal into a byte array.
            </summary>
            <param name="str">The hexadecimal string to convert.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:StringExtensions.DefaultIfNullOrEmpty(System.String,System.String)">
            <summary>
            Returns a default value if the string is null or empty.
            </summary>
            <param name="s">Original String</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:StringExtensions.ExceptionIfNullOrEmpty(System.String,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if the string value is empty.
            </summary>
            <param name="obj">The value to test.</param>
            <param name="message">The message to display if the value is null.</param>
            <param name="name">The name of the parameter being tested.</param>
        </member>
        <member name="M:StringExtensions.JoinNotNullOrEmpty(System.String[],System.String)">
            <summary>
            Joins  the values of a string array if the values are not null or empty.
            </summary>
            <param name="objs">The string array used for joining.</param>
            <param name="separator">The separator to use in the joined string.</param>
            <returns></returns>
        </member>
        <member name="M:StringExtensions.ParseCommandlineParams(System.String[])">
            <summary>
            Parses the commandline params.
            </summary>
            <param name="value">The value.</param>
            <returns>A StringDictionary type object of command line parameters.</returns>
        </member>
        <member name="M:StringExtensions.EncodeEmailAddress(System.String)">
            <summary>
            Encodes the email address so that the link is still valid, but the email address is useless for email harvsters.
            </summary>
            <param name="emailAddress">The email address.</param>
            <returns></returns>
        </member>
        <member name="M:StringExtensions.GetSHA1Hash(System.String)">
            <summary>
            Calculates the SHA1 hash of the supplied string and returns a base 64 string.
            </summary>
            <param name="stringToHash">String that must be hashed.</param>
            <returns>The hashed string or null if hashing failed.</returns>
            <exception cref="T:System.ArgumentException">Occurs when stringToHash or key is null or empty.</exception>
        </member>
        <member name="M:StringExtensions.ContainsAny(System.String,System.String[])">
            <summary>
            Determines whether the string contains any of the provided values.
            </summary>
            <param name="value"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:StringExtensions.ContainsAny(System.String,System.StringComparison,System.String[])">
            <summary>
            Determines whether the string contains any of the provided values.
            </summary>
            <param name="value"></param>
            <param name="comparisonType"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:StringExtensions.ContainsAll(System.String,System.String[])">
            <summary>
            Determines whether the string contains all of the provided values.
            </summary>
            <param name="value"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:StringExtensions.ContainsAll(System.String,System.StringComparison,System.String[])">
            <summary>
            Determines whether the string contains all of the provided values.
            </summary>
            <param name="value"></param>
            <param name="comparisonType"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:StringExtensions.EqualsAny(System.String,System.StringComparison,System.String[])">
            <summary>
            Determines whether the string is equal to any of the provided values.
            </summary>
            <param name="value"></param>
            <param name="comparisonType"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:StringExtensions.IsLikeAny(System.String,System.String[])">
            <summary>
            Wildcard comparison for any pattern
            </summary>
            <param name="value">The current <see cref="T:System.String"/> object</param>
            <param name="patterns">The array of string patterns</param>
            <returns></returns>
        </member>
        <member name="M:StringExtensions.IsLike(System.String,System.String)">
            <summary>
            Wildcard comparison
            </summary>
            <param name="value"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:StringExtensions.Truncate(System.String,System.Int32,System.Boolean)">
            <summary>
            Truncates a string with optional Elipses added
            </summary>
            <param name="value"></param>
            <param name="length"></param>
            <param name="useElipses"></param>
            <returns></returns>
        </member>
        <member name="T:ObjectExtensions">
            <summary>
            	Extension methods for the root data type object
            </summary>
        </member>
        <member name="M:ObjectExtensions.EqualsAny``1(``0,``0[])">
            <summary>
            	Determines whether the object is equal to any of the provided values.
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "obj">The object to be compared.</param>
            <param name = "values">The values to compare with the object.</param>
            <returns></returns>
        </member>
        <member name="M:ObjectExtensions.EqualsNone``1(``0,``0[])">
            <summary>
            	Determines whether the object is equal to none of the provided values.
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "obj">The object to be compared.</param>
            <param name = "values">The values to compare with the object.</param>
            <returns></returns>
        </member>
        <member name="M:ObjectExtensions.ConvertTo``1(System.Object)">
            <summary>
            	Converts an object to the specified target type or returns the default value if
                those 2 types are not convertible.
                <para>
                If the <paramref name="value"/> can't be convert even if the types are 
                convertible with each other, an exception is thrown.</para>
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "value">The value.</param>
            <returns>The target type</returns>
        </member>
        <member name="M:ObjectExtensions.ConvertToAndIgnoreException``1(System.Object)">
            <summary>
            	Converts an object to the specified target type or returns the default value.
                <para>Any exceptions are ignored. </para>
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "value">The value.</param>
            <returns>The target type</returns>
        </member>
        <member name="M:ObjectExtensions.ConvertToAndIgnoreException``1(System.Object,``0)">
            <summary>
            	Converts an object to the specified target type or returns the default value.
                <para>Any exceptions are ignored. </para>
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "value">The value.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The target type</returns>
        </member>
        <member name="M:ObjectExtensions.ConvertTo``1(System.Object,``0)">
            <summary>
            	Converts an object to the specified target type or returns the default value if
                those 2 types are not convertible.
                <para>
                If the <paramref name="value"/> can't be convert even if the types are 
                convertible with each other, an exception is thrown.</para>
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "value">The value.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The target type</returns>
        </member>
        <member name="M:ObjectExtensions.ConvertTo``1(System.Object,``0,System.Boolean)">
            <summary>
            	Converts an object to the specified target type or returns the default value if
                those 2 types are not convertible.
                <para>Any exceptions are optionally ignored (<paramref name="ignoreException"/>).</para>
                <para>
                If the exceptions are not ignored and the <paramref name="value"/> can't be convert even if 
                the types are convertible with each other, an exception is thrown.</para>
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "value">The value.</param>
            <param name = "defaultValue">The default value.</param>
            <param name = "ignoreException">if set to <c>true</c> ignore any exception.</param>
            <returns>The target type</returns>
        </member>
        <member name="M:ObjectExtensions.CanConvertTo``1(System.Object)">
            <summary>
            	Determines whether the value can (in theory) be converted to the specified target type.
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "value">The value.</param>
            <returns>
            	<c>true</c> if this instance can be convert to the specified target type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ObjectExtensions.ConvertTo``1(``0)">
            <summary>
            	Converts the specified value to a different type.
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "value">The value.</param>
            <returns>An universal converter suppliying additional target conversion methods</returns>
            <example>
            	<code>
            		var value = "123";
            		var numeric = value.ConvertTo().ToInt32();
            	</code>
            </example>
        </member>
        <member name="M:ObjectExtensions.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            	Dynamically invokes a method using reflection
            </summary>
            <param name = "obj">The object to perform on.</param>
            <param name = "methodName">The name of the method.</param>
            <param name = "parameters">The parameters passed to the method.</param>
            <returns>The return value</returns>
            <example>
            	<code>
            		var type = Type.GetType("System.IO.FileInfo, mscorlib");
            		var file = type.CreateInstance(@"c:\autoexec.bat");
            		if(file.GetPropertyValue&lt;bool&gt;("Exists")) {
            		var reader = file.InvokeMethod&lt;StreamReader&gt;("OpenText");
            		Console.WriteLine(reader.ReadToEnd());
            		reader.Close();
            		}
            	</code>
            </example>
        </member>
        <member name="M:ObjectExtensions.InvokeMethod``1(System.Object,System.String,System.Object[])">
            <summary>
            	Dynamically invokes a method using reflection and returns its value in a typed manner
            </summary>
            <typeparam name = "T">The expected return data types</typeparam>
            <param name = "obj">The object to perform on.</param>
            <param name = "methodName">The name of the method.</param>
            <param name = "parameters">The parameters passed to the method.</param>
            <returns>The return value</returns>
            <example>
            	<code>
            		var type = Type.GetType("System.IO.FileInfo, mscorlib");
            		var file = type.CreateInstance(@"c:\autoexec.bat");
            		if(file.GetPropertyValue&lt;bool&gt;("Exists")) {
            		var reader = file.InvokeMethod&lt;StreamReader&gt;("OpenText");
            		Console.WriteLine(reader.ReadToEnd());
            		reader.Close();
            		}
            	</code>
            </example>
        </member>
        <member name="M:ObjectExtensions.GetPropertyValue(System.Object,System.String)">
            <summary>
            	Dynamically retrieves a property value.
            </summary>
            <param name = "obj">The object to perform on.</param>
            <param name = "propertyName">The Name of the property.</param>
            <returns>The property value.</returns>
            <example>
            	<code>
            		var type = Type.GetType("System.IO.FileInfo, mscorlib");
            		var file = type.CreateInstance(@"c:\autoexec.bat");
            		if(file.GetPropertyValue&lt;bool&gt;("Exists")) {
            		var reader = file.InvokeMethod&lt;StreamReader&gt;("OpenText");
            		Console.WriteLine(reader.ReadToEnd());
            		reader.Close();
            		}
            	</code>
            </example>
        </member>
        <member name="M:ObjectExtensions.GetPropertyValue``1(System.Object,System.String)">
            <summary>
            	Dynamically retrieves a property value.
            </summary>
            <typeparam name = "T">The expected return data type</typeparam>
            <param name = "obj">The object to perform on.</param>
            <param name = "propertyName">The Name of the property.</param>
            <returns>The property value.</returns>
            <example>
            	<code>
            		var type = Type.GetType("System.IO.FileInfo, mscorlib");
            		var file = type.CreateInstance(@"c:\autoexec.bat");
            		if(file.GetPropertyValue&lt;bool&gt;("Exists")) {
            		var reader = file.InvokeMethod&lt;StreamReader&gt;("OpenText");
            		Console.WriteLine(reader.ReadToEnd());
            		reader.Close();
            		}
            	</code>
            </example>
        </member>
        <member name="M:ObjectExtensions.GetPropertyValue``1(System.Object,System.String,``0)">
            <summary>
            	Dynamically retrieves a property value.
            </summary>
            <typeparam name = "T">The expected return data type</typeparam>
            <param name = "obj">The object to perform on.</param>
            <param name = "propertyName">The Name of the property.</param>
            <param name = "defaultValue">The default value to return.</param>
            <returns>The property value.</returns>
            <example>
            	<code>
            		var type = Type.GetType("System.IO.FileInfo, mscorlib");
            		var file = type.CreateInstance(@"c:\autoexec.bat");
            		if(file.GetPropertyValue&lt;bool&gt;("Exists")) {
            		var reader = file.InvokeMethod&lt;StreamReader&gt;("OpenText");
            		Console.WriteLine(reader.ReadToEnd());
            		reader.Close();
            		}
            	</code>
            </example>
        </member>
        <member name="M:ObjectExtensions.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            	Dynamically sets a property value.
            </summary>
            <param name = "obj">The object to perform on.</param>
            <param name = "propertyName">The Name of the property.</param>
            <param name = "value">The value to be set.</param>
        </member>
        <member name="M:ObjectExtensions.GetAttribute``1(System.Object)">
            <summary>
            	Gets the first matching attribute defined on the data type.
            </summary>
            <typeparam name = "T">The attribute type tp look for.</typeparam>
            <param name = "obj">The object to look on.</param>
            <returns>The found attribute</returns>
        </member>
        <member name="M:ObjectExtensions.GetAttribute``1(System.Object,System.Boolean)">
            <summary>
            	Gets the first matching attribute defined on the data type.
            </summary>
            <typeparam name = "T">The attribute type tp look for.</typeparam>
            <param name = "obj">The object to look on.</param>
            <param name = "includeInherited">if set to <c>true</c> includes inherited attributes.</param>
            <returns>The found attribute</returns>
        </member>
        <member name="M:ObjectExtensions.GetAttributes``1(System.Object)">
            <summary>
            	Gets all matching attribute defined on the data type.
            </summary>
            <typeparam name = "T">The attribute type tp look for.</typeparam>
            <param name = "obj">The object to look on.</param>
            <returns>The found attributes</returns>
        </member>
        <member name="M:ObjectExtensions.GetAttributes``1(System.Object,System.Boolean)">
            <summary>
            	Gets all matching attribute defined on the data type.
            </summary>
            <typeparam name = "T">The attribute type tp look for.</typeparam>
            <param name = "obj">The object to look on.</param>
            <param name = "includeInherited">if set to <c>true</c> includes inherited attributes.</param>
            <returns>The found attributes</returns>
        </member>
        <member name="M:ObjectExtensions.IsOfType``1(System.Object)">
            <summary>
            	Determines whether the object is exactly of the passed generic type.
            </summary>
            <typeparam name = "T">The target type.</typeparam>
            <param name = "obj">The object to check.</param>
            <returns>
            	<c>true</c> if the object is of the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ObjectExtensions.IsOfType(System.Object,System.Type)">
            <summary>
            	Determines whether the object is excactly of the passed type
            </summary>
            <param name = "obj">The object to check.</param>
            <param name = "type">The target type.</param>
            <returns>
            	<c>true</c> if the object is of the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ObjectExtensions.IsOfTypeOrInherits``1(System.Object)">
            <summary>
            	Determines whether the object is of the passed generic type or inherits from it.
            </summary>
            <typeparam name = "T">The target type.</typeparam>
            <param name = "obj">The object to check.</param>
            <returns>
            	<c>true</c> if the object is of the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ObjectExtensions.IsOfTypeOrInherits(System.Object,System.Type)">
            <summary>
            	Determines whether the object is of the passed type or inherits from it.
            </summary>
            <param name = "obj">The object to check.</param>
            <param name = "type">The target type.</param>
            <returns>
            	<c>true</c> if the object is of the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ObjectExtensions.IsAssignableTo``1(System.Object)">
            <summary>
            	Determines whether the object is assignable to the passed generic type.
            </summary>
            <typeparam name = "T">The target type.</typeparam>
            <param name = "obj">The object to check.</param>
            <returns>
            	<c>true</c> if the object is assignable to the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ObjectExtensions.IsAssignableTo(System.Object,System.Type)">
            <summary>
            	Determines whether the object is assignable to the passed type.
            </summary>
            <param name = "obj">The object to check.</param>
            <param name = "type">The target type.</param>
            <returns>
            	<c>true</c> if the object is assignable to the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ObjectExtensions.GetTypeDefaultValue``1(``0)">
            <summary>
            	Gets the type default value for the underlying data type, in case of reference types: null
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "value">The value.</param>
            <returns>The default value</returns>
        </member>
        <member name="M:ObjectExtensions.ToDatabaseValue``1(``0)">
            <summary>
            	Converts the specified value to a database value and returns DBNull.Value if the value equals its default.
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:ObjectExtensions.CastTo``1(System.Object)">
            <summary>
            	Cast an object to the given type. Usefull especially for anonymous types.
            </summary>
            <typeparam name = "T">The type to cast to</typeparam>
            <param name = "value">The object to case</param>
            <returns>
            	the casted type or null if casting is not possible.
            </returns>
            <remarks>
            	Contributed by blaumeister, http://www.codeplex.com/site/users/view/blaumeiser
            </remarks>
        </member>
        <member name="M:ObjectExtensions.IsNull(System.Object)">
            <summary>
            	Returns TRUE, if specified target reference is equals with null reference.
            	Othervise returns FALSE.
            </summary>
            <param name = "target">Target reference. Can be null.</param>
            <remarks>
            	Some types has overloaded '==' and '!=' operators.
            	So the code "null == ((MyClass)null)" can returns <c>false</c>.
            	The most correct way how to test for null reference is using "System.Object.ReferenceEquals(object, object)" method.
            	However the notation with ReferenceEquals method is long and uncomfortable - this extension method solve it.
            
            	Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
            <example>
            	object someObject = GetSomeObject();
            	if ( someObject.IsNull() ) { /* the someObject is null */ }
            	else { /* the someObject is not null */ }
            </example>
        </member>
        <member name="M:ObjectExtensions.IsNull``1(``0)">
            <summary>
            	Returns TRUE, if specified target reference is equals with null reference.
            	Othervise returns FALSE.
            </summary>
            <typeparam name = "T">Type of target.</typeparam>
            <param name = "target">Target reference. Can be null.</param>
            <remarks>
            	Some types has overloaded '==' and '!=' operators.
            	So the code "null == ((MyClass)null)" can returns <c>false</c>.
            	The most correct way how to test for null reference is using "System.Object.ReferenceEquals(object, object)" method.
            	However the notation with ReferenceEquals method is long and uncomfortable - this extension method solve it.
            
            	Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
            <example>
            	MyClass someObject = GetSomeObject();
            	if ( someObject.IsNull() ) { /* the someObject is null */ }
            	else { /* the someObject is not null */ }
            </example>
        </member>
        <member name="M:ObjectExtensions.IsNotNull(System.Object)">
            <summary>
            	Returns TRUE, if specified target reference is equals with null reference.
            	Othervise returns FALSE.
            </summary>
            <param name = "target">Target reference. Can be null.</param>
            <remarks>
            	Some types has overloaded '==' and '!=' operators.
            	So the code "null == ((MyClass)null)" can returns <c>false</c>.
            	The most correct way how to test for null reference is using "System.Object.ReferenceEquals(object, object)" method.
            	However the notation with ReferenceEquals method is long and uncomfortable - this extension method solve it.
            
            	Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
            <example>
            	object someObject = GetSomeObject();
            	if ( someObject.IsNotNull() ) { /* the someObject is not null */ }
            	else { /* the someObject is null */ }
            </example>
        </member>
        <member name="M:ObjectExtensions.IsNotNull``1(``0)">
            <summary>
            	Returns TRUE, if specified target reference is equals with null reference.
            	Othervise returns FALSE.
            </summary>
            <typeparam name = "T">Type of target.</typeparam>
            <param name = "target">Target reference. Can be null.</param>
            <remarks>
            	Some types has overloaded '==' and '!=' operators.
            	So the code "null == ((MyClass)null)" can returns <c>false</c>.
            	The most correct way how to test for null reference is using "System.Object.ReferenceEquals(object, object)" method.
            	However the notation with ReferenceEquals method is long and uncomfortable - this extension method solve it.
            
            	Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
            <example>
            	MyClass someObject = GetSomeObject();
            	if ( someObject.IsNotNull() ) { /* the someObject is not null */ }
            	else { /* the someObject is null */ }
            </example>
        </member>
        <member name="M:ObjectExtensions.AsString(System.Object)">
            <summary>
            	If target is null, returns null.
            	Othervise returns string representation of target using current culture format provider.
            </summary>
            <param name = "target">Target transforming to string representation. Can be null.</param>
            <example>
            	float? number = null;
            	string text1 = number.AsString();
            
            	number = 15.7892;
            	string text2 = number.AsString();
            </example>
            <remarks>
            	Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
        </member>
        <member name="M:ObjectExtensions.AsString(System.Object,System.IFormatProvider)">
            <summary>
            	If target is null, returns null.
            	Othervise returns string representation of target using specified format provider.
            </summary>
            <param name = "target">Target transforming to string representation. Can be null.</param>
            <param name = "formatProvider">Format provider used to transformation target to string representation.</param>
            <example>
            	CultureInfo czech = new CultureInfo("cs-CZ");
            
            	float? number = null;
            	string text1 = number.AsString( czech );
            
            	number = 15.7892;
            	string text2 = number.AsString( czech );
            </example>
            <remarks>
            	Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
        </member>
        <member name="M:ObjectExtensions.AsInvariantString(System.Object)">
            <summary>
            	If target is null, returns null.
            	Othervise returns string representation of target using invariant format provider.
            </summary>
            <param name = "target">Target transforming to string representation. Can be null.</param>
            <example>
            	float? number = null;
            	string text1 = number.AsInvariantString();
            
            	number = 15.7892;
            	string text2 = number.AsInvariantString();
            </example>
            <remarks>
            	Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
        </member>
        <member name="M:ObjectExtensions.NotNull``1(``0,``0)">
            <summary>
            	If target is null reference, returns notNullValue.
            	Othervise returns target.
            </summary>
            <typeparam name = "T">Type of target.</typeparam>
            <param name = "target">Target which is maybe null. Can be null.</param>
            <param name = "notNullValue">Value used instead of null.</param>
            <example>
            	const int DEFAULT_NUMBER = 123;
            
            	int? number = null;
            	int notNullNumber1 = number.NotNull( DEFAULT_NUMBER ).Value; // returns 123
            
            	number = 57;
            	int notNullNumber2 = number.NotNull( DEFAULT_NUMBER ).Value; // returns 57
            </example>
            <remarks>
            	Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
        </member>
        <member name="M:ObjectExtensions.NotNull``1(``0,System.Func{``0})">
            <summary>
            	If target is null reference, returns result from notNullValueProvider.
            	Othervise returns target.
            </summary>
            <typeparam name = "T">Type of target.</typeparam>
            <param name = "target">Target which is maybe null. Can be null.</param>
            <param name = "notNullValueProvider">Delegate which return value is used instead of null.</param>
            <example>
            	int? number = null;
            	int notNullNumber1 = number.NotNull( ()=> GetRandomNumber(10, 20) ).Value; // returns random number from 10 to 20
            
            	number = 57;
            	int notNullNumber2 = number.NotNull( ()=> GetRandomNumber(10, 20) ).Value; // returns 57
            </example>
            <remarks>
            	Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
        </member>
        <member name="M:ObjectExtensions.ToStringDump(System.Object,System.Reflection.BindingFlags,System.Int32)">
            <summary>
            	get a string representation of a given object.
            </summary>
            <param name = "o">the object to dump</param>
            <param name = "flags">BindingFlags to use for reflection</param>
            <param name = "maxArrayElements">Number of elements to show for IEnumerables</param>
            <returns></returns>
        </member>
        <member name="M:ObjectExtensions.ToHTMLTable(System.Object,System.Reflection.BindingFlags,System.Int32)">
            <summary>
            	get a html-table representation of a given object.
            </summary>
            <param name = "o">the object to dump</param>
            <param name = "flags">BindingFlags to use for reflection</param>
            <param name = "maxArrayElements">Number of elements to show for IEnumerables</param>
            <returns></returns>
        </member>
        <member name="M:ObjectExtensions.ToXElement(System.Object,System.Reflection.BindingFlags,System.Int32)">
            <summary>
            	get a XElement representation of a given object.
            </summary>
            <param name = "o">the object to dump</param>
            <param name = "flags">BindingFlags to use for reflection</param>
            <param name = "maxArrayElements">Number of elements to show for IEnumerables</param>
            <returns></returns>
        </member>
        <member name="M:ObjectExtensions.DynamicCast(System.Object,System.Type)">
            <summary>
            	Cast an object to the given type. Usefull especially for anonymous types.
            </summary>
            <param name="obj">The object to be cast</param>
            <param name="targetType">The type to cast to</param>
            <returns>
            	the casted type or null if casting is not possible.
            </returns>
            <remarks>
            	Contributed by Michael T, http://about.me/MichaelTran
            </remarks>
        </member>
        <member name="M:ObjectExtensions.CastAs``1(System.Object)">
            <summary>
            Cast an object to the given type. Usefull especially for anonymous types.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The object to be cast</param>
            <returns>
            the casted type or null if casting is not possible.
            </returns>
            <remarks>
            Contributed by Michael T, http://about.me/MichaelTran
            </remarks>
        </member>
        <member name="M:ObjectExtensions.CountLoopsToNull``1(``0,System.Func{``0,``0})">
            <summary>
            Counts and returns the recursive execution of the passed function until it returns null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item">The item to start peforming on.</param>
            <param name="function">The function to be executed.</param>
            <returns>The number of executions until the function returned null</returns>
        </member>
        <member name="M:ObjectExtensions.FindTypeByRecursion``2(``0,System.Func{``0,``0})">
            <summary>
            Finds a type instance using a recursive call. The method is useful to find specific parents for example.
            </summary>
            <typeparam name="T">The source type to perform on.</typeparam>
            <typeparam name="K">The targte type to be returned</typeparam>
            <param name="item">The item to start performing on.</param>
            <param name="function">The function to be executed.</param>
            <returns>An target type instance or null.</returns>
            <example><code>
            var tree = ...
            var node = tree.FindNodeByValue("");
            var parentByType = node.FindTypeByRecursion%lt;TheType&gt;(n => n.Parent);
            </code></example>
        </member>
        <member name="M:ObjectExtensions.Clone``1(``0)">
            <summary>
            Perform a deep Copy of the object.
            </summary>
            <typeparam name="T">The type of object being copied.</typeparam>
            <param name="source">The object instance to copy.</param>
            <returns>The copied object.</returns>
        </member>
        <member name="M:ObjectExtensions.Cast``1(System.Object)">
            <summary>
            Casts the specified object to the specified type.
            </summary>
            <typeparam name="T">The type to cast to</typeparam>
            <param name="o">The Object being casted</param>
            <returns>returns the object as casted type.</returns>
        </member>
        <member name="M:ObjectExtensions.Cast``1(System.Object,``0)">
            <summary>
            Casts the specified object. If the object is null a return type can be specified.
            </summary>
            <typeparam name="T">The type to cast to.</typeparam>
            <param name="o">The Object being casted</param>
            <param name="defaultValue">The default Type.</param>
            <returns>returns the object as casted type. If null the default type is returned.</returns>
        </member>
        <member name="M:ObjectExtensions.CopyPropertiesFrom(System.Object,System.Object)">
            <summary>
            Copies the readable and writable public property values from the source object to the target
            </summary>
            <remarks>The source and target objects must be of the same type.</remarks>
            <param name="target">The target object</param>
            <param name="source">The source object</param>
        </member>
        <member name="M:ObjectExtensions.CopyPropertiesFrom(System.Object,System.Object,System.String)">
            <summary>
            Copies the readable and writable public property values from the source object to the target
            </summary>
            <remarks>The source and target objects must be of the same type.</remarks>
            <param name="target">The target object</param>
            <param name="source">The source object</param>
            <param name="ignoreProperty">A single property name to ignore</param>
        </member>
        <member name="M:ObjectExtensions.CopyPropertiesFrom(System.Object,System.Object,System.String[])">
            <summary>
            Copies the readable and writable public property values from the source object to the target
            </summary>
            <remarks>The source and target objects must be of the same type.</remarks>
            <param name="target">The target object</param>
            <param name="source">The source object</param>
            <param name="ignoreProperties">An array of property names to ignore</param>
        </member>
        <member name="M:ObjectExtensions.ToPropertiesString(System.Object)">
            <summary>
            Returns a string representation of the objects property values
            </summary>
            <param name="source">The object for the string representation</param>
            <returns>A string</returns>
        </member>
        <member name="M:ObjectExtensions.ToPropertiesString(System.Object,System.String)">
            <summary>
            Returns a string representation of the objects property values
            </summary>
            <param name="source">The object for the string representation</param>
            <param name="delimiter">The line terminstor string to use between properties</param>
            <returns>A string</returns>
        </member>
        <member name="M:ObjectExtensions.ToXml(System.Object)">
            <summary>
            Serializes the object into an XML string, using the encoding method specified in
            <see cref="!:ExtensionMethodsSettings.DefaultEncoding"/>
            </summary>
            <remarks>
            The object to be serialized should be decorated with the 
            <see cref="T:System.SerializableAttribute"/>, or implement the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface.
            </remarks>
            <param name="source">The object to serialize</param>
            <returns>An XML encoded string representation of the source object</returns>
        </member>
        <member name="M:ObjectExtensions.ToXml(System.Object,System.Text.Encoding)">
            <summary>
            Serializes the object into an XML string
            </summary>
            <remarks>
            The object to be serialized should be decorated with the 
            <see cref="T:System.SerializableAttribute"/>, or implement the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface.
            </remarks>
            <param name="source">The object to serialize</param>
            <param name="encoding">The Encoding scheme to use when serializing the data to XML</param>
            <returns>An XML encoded string representation of the source object</returns>
        </member>
        <member name="M:ObjectExtensions.ToXml``1(``0)">
            <summary>
            Serializes the object into an XML string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:ObjectExtensions.ExceptionIfNullOrEmpty(System.Object,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> 
            if the the value is null.
            </summary>
            <param name="value">The value to test.</param>
            <param name="message">The message to display if the value is null.</param>
            <param name="name">The name of the parameter being tested.</param>
        </member>
        <member name="T:TextReaderExtensions">
            <summary>
            	Extension methods for the TextReader class and its sub classes (StreamReader, StringReader)
            </summary>
        </member>
        <member name="M:TextReaderExtensions.IterateLines(System.IO.TextReader)">
            <summary>
            	The method provides an iterator through all lines of the text reader.
            </summary>
            <param name = "reader">The text reader.</param>
            <returns>The iterator</returns>
            <example>
            	<code>
            		using(var reader = fileInfo.OpenText()) {
            		foreach(var line in reader.IterateLines()) {
            		// ...
            		}
            		}
            	</code>
            </example>
            <remarks>
            	Contributed by OlivierJ
            </remarks>
        </member>
        <member name="M:TextReaderExtensions.IterateLines(System.IO.TextReader,System.Action{System.String})">
            <summary>
            	The method executes the passed delegate /lambda expression) for all lines of the text reader.
            </summary>
            <param name = "reader">The text reader.</param>
            <param name = "action">The action.</param>
            <example>
            	<code>
            		using(var reader = fileInfo.OpenText()) {
            		reader.IterateLines(l => Console.WriteLine(l));
            		}
            	</code>
            </example>
            <remarks>
            	Contributed by OlivierJ
            </remarks>
        </member>
        <member name="T:TypeExtensions">
            <summary>
            	Extension methods for the reflection meta data type "Type"
            </summary>
        </member>
        <member name="M:TypeExtensions.CreateInstance(System.Type,System.Object[])">
            <summary>
            	Creates and returns an instance of the desired type
            </summary>
            <param name = "type">The type to be instanciated.</param>
            <param name = "constructorParameters">Optional constructor parameters</param>
            <returns>The instanciated object</returns>
            <example>
            	<code>
            		var type = Type.GetType(".NET full qualified class Type")
            		var instance = type.CreateInstance();
            	</code>
            </example>
        </member>
        <member name="M:TypeExtensions.CreateInstance``1(System.Type,System.Object[])">
            <summary>
            	Creates and returns an instance of the desired type casted to the generic parameter type T
            </summary>
            <typeparam name = "T">The data type the instance is casted to.</typeparam>
            <param name = "type">The type to be instanciated.</param>
            <param name = "constructorParameters">Optional constructor parameters</param>
            <returns>The instanciated object</returns>
            <example>
            	<code>
            		var type = Type.GetType(".NET full qualified class Type")
            		var instance = type.CreateInstance&lt;IDataType&gt;();
            	</code>
            </example>
        </member>
        <member name="M:TypeExtensions.IsBaseType(System.Type,System.Type)">
            <summary>
            	Check if this is a base type
            </summary>
            <param name = "type"></param>
            <param name = "checkingType"></param>
            <returns></returns>
             <remarks>
             	Contributed by Michael T, http://about.me/MichaelTran
             </remarks>
        </member>
        <member name="M:TypeExtensions.IsSubclassOfRawGeneric(System.Type,System.Type)">
            <summary>
            	Check if this is a sub class generic type
            </summary>
            <param name = "generic"></param>
            <param name = "toCheck"></param>
            <returns></returns>
             <remarks>
             	Contributed by Michael T, http://about.me/MichaelTran
             </remarks>
        </member>
        <member name="M:TypeExtensions.CreateGenericTypeInstance``1(System.Type,System.Type[])">
            <summary>
            Closes the passed generic type with the provided type arguments and returns an instance of the newly constructed type.
            </summary>
            <typeparam name="T">The typed type to be returned.</typeparam>
            <param name="genericType">The open generic type.</param>
            <param name="typeArguments">The type arguments to close the generic type.</param>
            <returns>An instance of the constructed type casted to T.</returns>
        </member>
        <member name="T:ValueTypeExtensions">
            <summary>
            	Extension methods for all kind of value types (structs)
            </summary>
        </member>
        <member name="M:ValueTypeExtensions.IsEmpty``1(``0)">
            <summary>
            	Determines whether the specified value is empty.
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "value">The value.</param>
            <returns>
            	<c>true</c> if the specified value is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ValueTypeExtensions.IsNotEmpty``1(``0)">
            <summary>
            	Determines whether the specified value is not empty.
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "value">The value.</param>
            <returns>
            	<c>true</c> if the specified value is not empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ValueTypeExtensions.ToNullable``1(``0)">
            <summary>
            	Converts the specified value to a corresponding nullable type
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "value">The value.</param>
            <returns>The nullable type</returns>
        </member>
        <member name="T:XmlNodeExtensions">
            <summary>
            	Extension methods for the XmlNode / XmlDocument classes and its sub classes
            </summary>
        </member>
        <member name="M:XmlNodeExtensions.CreateChildNode(System.Xml.XmlNode,System.String)">
            <summary>
            	Appends a child to a XML node
            </summary>
            <param name = "parentNode">The parent node.</param>
            <param name = "name">The name of the child node.</param>
            <returns>The newly cerated XML node</returns>
        </member>
        <member name="M:XmlNodeExtensions.CreateChildNode(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            	Appends a child to a XML node
            </summary>
            <param name = "parentNode">The parent node.</param>
            <param name = "name">The name of the child node.</param>
            <param name = "namespaceUri">The node namespace.</param>
            <returns>The newly cerated XML node</returns>
        </member>
        <member name="M:XmlNodeExtensions.CreateCDataSection(System.Xml.XmlNode)">
            <summary>
            	Appends a CData section to a XML node
            </summary>
            <param name = "parentNode">The parent node.</param>
            <returns>The created CData Section</returns>
        </member>
        <member name="M:XmlNodeExtensions.CreateCDataSection(System.Xml.XmlNode,System.String)">
            <summary>
            	Appends a CData section to a XML node and prefills the provided data
            </summary>
            <param name = "parentNode">The parent node.</param>
            <param name = "data">The CData section value.</param>
            <returns>The created CData Section</returns>
        </member>
        <member name="M:XmlNodeExtensions.GetCDataSection(System.Xml.XmlNode)">
            <summary>
            	Returns the value of a nested CData section.
            </summary>
            <param name = "parentNode">The parent node.</param>
            <returns>The CData section content</returns>
        </member>
        <member name="M:XmlNodeExtensions.GetAttribute(System.Xml.XmlNode,System.String)">
            <summary>
            	Gets an attribute value
            </summary>
            <param name = "node">The node.</param>
            <param name = "attributeName">The Name of the attribute.</param>
            <returns>The attribute value</returns>
        </member>
        <member name="M:XmlNodeExtensions.GetAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            	Gets an attribute value
            </summary>
            <param name = "node">The node.</param>
            <param name = "attributeName">The Name of the attribute.</param>
            <param name = "defaultValue">The default value to be returned if no matching attribute exists.</param>
            <returns>The attribute value</returns>
        </member>
        <member name="M:XmlNodeExtensions.GetAttribute``1(System.Xml.XmlNode,System.String)">
            <summary>
            	Gets an attribute value converted to the specified data type
            </summary>
            <typeparam name = "T">The desired return data type</typeparam>
            <param name = "node">The node.</param>
            <param name = "attributeName">The Name of the attribute.</param>
            <returns>The attribute value</returns>
        </member>
        <member name="M:XmlNodeExtensions.GetAttribute``1(System.Xml.XmlNode,System.String,``0)">
            <summary>
            	Gets an attribute value converted to the specified data type
            </summary>
            <typeparam name = "T">The desired return data type</typeparam>
            <param name = "node">The node.</param>
            <param name = "attributeName">The Name of the attribute.</param>
            <param name = "defaultValue">The default value to be returned if no matching attribute exists.</param>
            <returns>The attribute value</returns>
        </member>
        <member name="M:XmlNodeExtensions.SetAttribute(System.Xml.XmlNode,System.String,System.Object)">
            <summary>
            	Creates or updates an attribute with the passed value.
            </summary>
            <param name = "node">The node.</param>
            <param name = "name">The name.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:XmlNodeExtensions.SetAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            	Creates or updates an attribute with the passed value.
            </summary>
            <param name = "node">The node.</param>
            <param name = "name">The name.</param>
            <param name = "value">The value.</param>
        </member>
    </members>
</doc>
